<repository/interface.go>
package repository

import "cart-service/models"

type CartRepository interface {
	AddToCart(item *models.CartItem) error
	RemoveFromCart(userID, productID string) error
	UpdateCartItem(userID, productID string, quantity int) error
	GetCart(userID string) ([]models.CartItem, error)
	ClearCart(userID string) error // ✅ New method

}

</repository/interface.go>

<repository/cart_pg.go>
package repository

import (
	"cart-service/models"
	"os"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type PostgresCartRepo struct {
	DB *gorm.DB
}

func NewPostgresCartRepo() *PostgresCartRepo {
	dsn := os.Getenv("DATABASE_DSN")
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect to DB")
	}

	db.AutoMigrate(&models.CartItem{})
	return &PostgresCartRepo{DB: db}
}

func (r *PostgresCartRepo) AddToCart(item *models.CartItem) error {
	item.AddedAt = time.Now()
	return r.DB.Save(item).Error
}

func (r *PostgresCartRepo) RemoveFromCart(userID, productID string) error {
	return r.DB.Delete(&models.CartItem{}, "user_id = ? AND product_id = ?", userID, productID).Error
}

func (r *PostgresCartRepo) UpdateCartItem(userID, productID string, quantity int) error {
	return r.DB.Model(&models.CartItem{}).
		Where("user_id = ? AND product_id = ?", userID, productID).
		Update("quantity", quantity).Error
}

func (r *PostgresCartRepo) GetCart(userID string) ([]models.CartItem, error) {
	var items []models.CartItem
	err := r.DB.Where("user_id = ?", userID).Find(&items).Error
	return items, err
}

func (r *PostgresCartRepo) ClearCart(userID string) error {
	return r.DB.Where("user_id = ?", userID).Delete(&models.CartItem{}).Error
}

</repository/cart_pg.go>

<handlers/cart.go>
package handlers

import (
	"cart-service/models"
	cartpb "cart-service/proto"
	"cart-service/repository"
	"context"
	"fmt"
	"log"
	"time"
)

type CartService struct {
	Repo repository.CartRepository
	cartpb.UnimplementedCartServiceServer
}

// AddToCart adds an item to the user's cart.
func (s *CartService) AddToCart(ctx context.Context, req *cartpb.CartItem) (*cartpb.GenericResponse, error) {
	log.Printf("[AddToCart] Called for user %s: ProductID=%s, Size=%s, Color=%s, Qty=%d",
		req.UserId, req.ProductId, req.Size, req.Color, req.Quantity)

	item := &models.CartItem{
		UserID:    req.UserId,
		ProductID: req.ProductId,
		Size:      req.Size,
		Color:     req.Color,
		Quantity:  int(req.Quantity),
		AddedAt:   time.Now(),
	}

	if err := s.Repo.AddToCart(item); err != nil {
		log.Printf("[AddToCart] ❌ Failed to add to cart: %v", err)
		return &cartpb.GenericResponse{Message: "Failed to add to cart"}, err
	}

	log.Printf("[AddToCart] ✅ Item added to cart for user %s", req.UserId)
	return &cartpb.GenericResponse{Message: "Item added to cart"}, nil
}

// RemoveFromCart deletes a product from the user's cart.
func (s *CartService) RemoveFromCart(ctx context.Context, req *cartpb.CartRequest) (*cartpb.GenericResponse, error) {
	log.Printf("[RemoveFromCart] Called for user %s: ProductID=%s", req.UserId, req.ProductId)

	if err := s.Repo.RemoveFromCart(req.UserId, req.ProductId); err != nil {
		log.Printf("[RemoveFromCart] ❌ Failed to remove item: %v", err)
		return &cartpb.GenericResponse{Message: "Failed to remove item"}, err
	}

	log.Printf("[RemoveFromCart] ✅ Item removed from cart for user %s", req.UserId)
	return &cartpb.GenericResponse{Message: "Item removed from cart"}, nil
}

// UpdateCartItem updates the quantity of a cart item.
func (s *CartService) UpdateCartItem(ctx context.Context, req *cartpb.CartUpdateRequest) (*cartpb.GenericResponse, error) {
	log.Printf("[UpdateCartItem] Called for user %s: ProductID=%s, NewQty=%d", req.UserId, req.ProductId, req.Quantity)

	if err := s.Repo.UpdateCartItem(req.UserId, req.ProductId, int(req.Quantity)); err != nil {
		log.Printf("[UpdateCartItem] ❌ Failed to update item: %v", err)
		return &cartpb.GenericResponse{Message: "Failed to update item"}, err
	}

	log.Printf("[UpdateCartItem] ✅ Item updated for user %s", req.UserId)
	return &cartpb.GenericResponse{Message: "Item updated"}, nil
}

// GetCart fetches the list of items in a user's cart.
func (s *CartService) GetCart(ctx context.Context, req *cartpb.UserRequest) (*cartpb.CartList, error) {
	log.Printf("[GetCart] Called for user %s", req.UserId)

	items, err := s.Repo.GetCart(req.UserId)
	if err != nil {
		log.Printf("[GetCart] ❌ Failed to fetch cart: %v", err)
		return nil, err
	}

	log.Printf("[GetCart] ✅ Retrieved %d cart items for user %s", len(items), req.UserId)

	var cart []*cartpb.CartItem
	for _, item := range items {
		cart = append(cart, &cartpb.CartItem{
			UserId:    item.UserID,
			ProductId: item.ProductID,
			Size:      item.Size,
			Color:     item.Color,
			Quantity:  int32(item.Quantity),
		})
	}
	fmt.Println("Cart Items tmkc:", cart)
	return &cartpb.CartList{Items: cart}, nil
}

func (s *CartService) ClearCart(ctx context.Context, req *cartpb.UserRequest) (*cartpb.GenericResponse, error) {
	log.Printf("[ClearCart] Called for user %s", req.UserId)

	if err := s.Repo.ClearCart(req.UserId); err != nil {
		log.Printf("[ClearCart] ❌ Failed to clear cart: %v", err)
		return &cartpb.GenericResponse{Message: "Failed to clear cart"}, err
	}

	log.Printf("[ClearCart] ✅ Cleared cart for user %s", req.UserId)
	return &cartpb.GenericResponse{Message: "Cart cleared"}, nil
}

</handlers/cart.go>

<models/cart.go>
package models

import "time"

type CartItem struct {
    UserID    string `gorm:"primaryKey"`
    ProductID string `gorm:"primaryKey"`
    Size      string
    Color     string
    Quantity  int
    AddedAt   time.Time
}

</models/cart.go>

<main.go>
package main

import (
    "cart-service/handlers"
    cartpb "cart-service/proto"
    "cart-service/repository"
    "github.com/joho/godotenv"
    "google.golang.org/grpc"
    "log"
    "net"
)

func main() {
    _ = godotenv.Load("../.env")

    repo := repository.NewPostgresCartRepo()
    handler := &handlers.CartService{Repo: repo}

    lis, err := net.Listen("tcp", ":50053")
    if err != nil {
        log.Fatalf("failed to listen: %v", err)
    }

    grpcServer := grpc.NewServer()
    cartpb.RegisterCartServiceServer(grpcServer, handler)

    log.Println("Cart Service is running on port :50053")
    if err := grpcServer.Serve(lis); err != nil {
        log.Fatalf("failed to serve: %v", err)
    }
}

</main.go>

<proto/cart.pb.go>
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: proto/cart.proto

package cartpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CartItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductId     string                 `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Size          string                 `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Color         string                 `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Quantity      int32                  `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ProductName   string                 `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"` // ✅
	Price         float32                `protobuf:"fixed32,7,opt,name=price,proto3" json:"price,omitempty"`                              // ✅
	ImageUrl      string                 `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`          // ✅ optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartItem) Reset() {
	*x = CartItem{}
	mi := &file_proto_cart_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartItem) ProtoMessage() {}

func (x *CartItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cart_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartItem.ProtoReflect.Descriptor instead.
func (*CartItem) Descriptor() ([]byte, []int) {
	return file_proto_cart_proto_rawDescGZIP(), []int{0}
}

func (x *CartItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CartItem) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CartItem) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CartItem) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *CartItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CartItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *CartItem) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CartItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type CartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductId     string                 `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartRequest) Reset() {
	*x = CartRequest{}
	mi := &file_proto_cart_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartRequest) ProtoMessage() {}

func (x *CartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cart_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartRequest.ProtoReflect.Descriptor instead.
func (*CartRequest) Descriptor() ([]byte, []int) {
	return file_proto_cart_proto_rawDescGZIP(), []int{1}
}

func (x *CartRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CartRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type CartUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductId     string                 `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Quantity      int32                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartUpdateRequest) Reset() {
	*x = CartUpdateRequest{}
	mi := &file_proto_cart_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartUpdateRequest) ProtoMessage() {}

func (x *CartUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cart_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartUpdateRequest.ProtoReflect.Descriptor instead.
func (*CartUpdateRequest) Descriptor() ([]byte, []int) {
	return file_proto_cart_proto_rawDescGZIP(), []int{2}
}

func (x *CartUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CartUpdateRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CartUpdateRequest) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type UserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	mi := &file_proto_cart_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cart_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_proto_cart_proto_rawDescGZIP(), []int{3}
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CartList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CartItem            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartList) Reset() {
	*x = CartList{}
	mi := &file_proto_cart_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartList) ProtoMessage() {}

func (x *CartList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cart_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartList.ProtoReflect.Descriptor instead.
func (*CartList) Descriptor() ([]byte, []int) {
	return file_proto_cart_proto_rawDescGZIP(), []int{4}
}

func (x *CartList) GetItems() []*CartItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GenericResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	mi := &file_proto_cart_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cart_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_proto_cart_proto_rawDescGZIP(), []int{5}
}

func (x *GenericResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_cart_proto protoreflect.FileDescriptor

const file_proto_cart_proto_rawDesc = "" +
	"\n" +
	"\x10proto/cart.proto\x12\x04cart\"\xde\x01\n" +
	"\bCartItem\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"product_id\x18\x02 \x01(\tR\tproductId\x12\x12\n" +
	"\x04size\x18\x03 \x01(\tR\x04size\x12\x14\n" +
	"\x05color\x18\x04 \x01(\tR\x05color\x12\x1a\n" +
	"\bquantity\x18\x05 \x01(\x05R\bquantity\x12!\n" +
	"\fproduct_name\x18\x06 \x01(\tR\vproductName\x12\x14\n" +
	"\x05price\x18\a \x01(\x02R\x05price\x12\x1b\n" +
	"\timage_url\x18\b \x01(\tR\bimageUrl\"E\n" +
	"\vCartRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"product_id\x18\x02 \x01(\tR\tproductId\"g\n" +
	"\x11CartUpdateRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"product_id\x18\x02 \x01(\tR\tproductId\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x05R\bquantity\"&\n" +
	"\vUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"0\n" +
	"\bCartList\x12$\n" +
	"\x05items\x18\x01 \x03(\v2\x0e.cart.CartItemR\x05items\"+\n" +
	"\x0fGenericResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2\xa4\x02\n" +
	"\vCartService\x122\n" +
	"\tAddToCart\x12\x0e.cart.CartItem\x1a\x15.cart.GenericResponse\x12:\n" +
	"\x0eRemoveFromCart\x12\x11.cart.CartRequest\x1a\x15.cart.GenericResponse\x12@\n" +
	"\x0eUpdateCartItem\x12\x17.cart.CartUpdateRequest\x1a\x15.cart.GenericResponse\x12,\n" +
	"\aGetCart\x12\x11.cart.UserRequest\x1a\x0e.cart.CartList\x125\n" +
	"\tClearCart\x12\x11.cart.UserRequest\x1a\x15.cart.GenericResponseB\x1bZ\x19cart-service/proto;cartpbb\x06proto3"

var (
	file_proto_cart_proto_rawDescOnce sync.Once
	file_proto_cart_proto_rawDescData []byte
)

func file_proto_cart_proto_rawDescGZIP() []byte {
	file_proto_cart_proto_rawDescOnce.Do(func() {
		file_proto_cart_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_cart_proto_rawDesc), len(file_proto_cart_proto_rawDesc)))
	})
	return file_proto_cart_proto_rawDescData
}

var file_proto_cart_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_cart_proto_goTypes = []any{
	(*CartItem)(nil),          // 0: cart.CartItem
	(*CartRequest)(nil),       // 1: cart.CartRequest
	(*CartUpdateRequest)(nil), // 2: cart.CartUpdateRequest
	(*UserRequest)(nil),       // 3: cart.UserRequest
	(*CartList)(nil),          // 4: cart.CartList
	(*GenericResponse)(nil),   // 5: cart.GenericResponse
}
var file_proto_cart_proto_depIdxs = []int32{
	0, // 0: cart.CartList.items:type_name -> cart.CartItem
	0, // 1: cart.CartService.AddToCart:input_type -> cart.CartItem
	1, // 2: cart.CartService.RemoveFromCart:input_type -> cart.CartRequest
	2, // 3: cart.CartService.UpdateCartItem:input_type -> cart.CartUpdateRequest
	3, // 4: cart.CartService.GetCart:input_type -> cart.UserRequest
	3, // 5: cart.CartService.ClearCart:input_type -> cart.UserRequest
	5, // 6: cart.CartService.AddToCart:output_type -> cart.GenericResponse
	5, // 7: cart.CartService.RemoveFromCart:output_type -> cart.GenericResponse
	5, // 8: cart.CartService.UpdateCartItem:output_type -> cart.GenericResponse
	4, // 9: cart.CartService.GetCart:output_type -> cart.CartList
	5, // 10: cart.CartService.ClearCart:output_type -> cart.GenericResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_cart_proto_init() }
func file_proto_cart_proto_init() {
	if File_proto_cart_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_cart_proto_rawDesc), len(file_proto_cart_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cart_proto_goTypes,
		DependencyIndexes: file_proto_cart_proto_depIdxs,
		MessageInfos:      file_proto_cart_proto_msgTypes,
	}.Build()
	File_proto_cart_proto = out.File
	file_proto_cart_proto_goTypes = nil
	file_proto_cart_proto_depIdxs = nil
}

</proto/cart.pb.go>

<proto/cart_grpc.pb.go>
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/cart.proto

package cartpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_AddToCart_FullMethodName      = "/cart.CartService/AddToCart"
	CartService_RemoveFromCart_FullMethodName = "/cart.CartService/RemoveFromCart"
	CartService_UpdateCartItem_FullMethodName = "/cart.CartService/UpdateCartItem"
	CartService_GetCart_FullMethodName        = "/cart.CartService/GetCart"
	CartService_ClearCart_FullMethodName      = "/cart.CartService/ClearCart"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	AddToCart(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*GenericResponse, error)
	RemoveFromCart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UpdateCartItem(ctx context.Context, in *CartUpdateRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetCart(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*CartList, error)
	ClearCart(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddToCart(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CartService_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveFromCart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateCartItem(ctx context.Context, in *CartUpdateRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CartService_UpdateCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCart(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*CartList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartList)
	err := c.cc.Invoke(ctx, CartService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ClearCart(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, CartService_ClearCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility.
type CartServiceServer interface {
	AddToCart(context.Context, *CartItem) (*GenericResponse, error)
	RemoveFromCart(context.Context, *CartRequest) (*GenericResponse, error)
	UpdateCartItem(context.Context, *CartUpdateRequest) (*GenericResponse, error)
	GetCart(context.Context, *UserRequest) (*CartList, error)
	ClearCart(context.Context, *UserRequest) (*GenericResponse, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartServiceServer struct{}

func (UnimplementedCartServiceServer) AddToCart(context.Context, *CartItem) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServiceServer) RemoveFromCart(context.Context, *CartRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedCartServiceServer) UpdateCartItem(context.Context, *CartUpdateRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedCartServiceServer) GetCart(context.Context, *UserRequest) (*CartList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartServiceServer) ClearCart(context.Context, *UserRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}
func (UnimplementedCartServiceServer) testEmbeddedByValue()                     {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddToCart(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveFromCart(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_UpdateCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateCartItem(ctx, req.(*CartUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCart(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ClearCart(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _CartService_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _CartService_RemoveFromCart_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _CartService_UpdateCartItem_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartService_GetCart_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _CartService_ClearCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cart.proto",
}

</proto/cart_grpc.pb.go>

