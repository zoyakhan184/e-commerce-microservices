<payment/page.tsx>
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { useCart } from "@/contexts/cart-context"
import { useAuth } from "@/contexts/auth-context"
import { Header } from "@/components/layout/header"
import { CreditCard, Smartphone, Wallet, Calendar, Truck } from "lucide-react"

export default function PaymentPage() {
  const { items, totalPrice, clearCart } = useCart()
  const { user } = useAuth()
  const router = useRouter()
  const [paymentMethod, setPaymentMethod] = useState("card")
  const [isProcessing, setIsProcessing] = useState(false)
  const [cardDetails, setCardDetails] = useState({
    number: "",
    expiry: "",
    cvv: "",
    name: user?.name || "",
  })

  if (!user) {
    router.push("/auth/login")
    return null
  }

  if (items.length === 0) {
    router.push("/cart")
    return null
  }

  const shippingCost = 9.99
  const tax = totalPrice * 0.08
  const finalTotal = totalPrice + shippingCost + tax

  const handlePayment = async () => {
    setIsProcessing(true)

    // Simulate payment processing
    await new Promise((resolve) => setTimeout(resolve, 3000))

    // Clear cart and redirect to confirmation
    clearCart()
    router.push("/order-confirmation")
  }

  const expectedDelivery = new Date()
  expectedDelivery.setDate(expectedDelivery.getDate() + 5)

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Header />
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">Payment</h1>

          <div className="grid lg:grid-cols-3 gap-8">
            {/* Payment Methods */}
            <div className="lg:col-span-2 space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Payment Method</CardTitle>
                </CardHeader>
                <CardContent>
                  <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>
                    <div className="flex items-center space-x-3 p-4 border rounded-lg">
                      <RadioGroupItem value="card" id="card" />
                      <Label htmlFor="card" className="flex items-center gap-2 cursor-pointer">
                        <CreditCard className="h-5 w-5" />
                        Credit/Debit Card
                      </Label>
                    </div>
                    <div className="flex items-center space-x-3 p-4 border rounded-lg">
                      <RadioGroupItem value="upi" id="upi" />
                      <Label htmlFor="upi" className="flex items-center gap-2 cursor-pointer">
                        <Smartphone className="h-5 w-5" />
                        UPI Payment
                      </Label>
                    </div>
                    <div className="flex items-center space-x-3 p-4 border rounded-lg">
                      <RadioGroupItem value="wallet" id="wallet" />
                      <Label htmlFor="wallet" className="flex items-center gap-2 cursor-pointer">
                        <Wallet className="h-5 w-5" />
                        Digital Wallet
                      </Label>
                    </div>
                  </RadioGroup>
                </CardContent>
              </Card>

              {/* Payment Details */}
              {paymentMethod === "card" && (
                <Card>
                  <CardHeader>
                    <CardTitle>Card Details</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="cardName">Cardholder Name</Label>
                      <Input
                        id="cardName"
                        value={cardDetails.name}
                        onChange={(e) => setCardDetails((prev) => ({ ...prev, name: e.target.value }))}
                        placeholder="Enter cardholder name"
                      />
                    </div>
                    <div>
                      <Label htmlFor="cardNumber">Card Number</Label>
                      <Input
                        id="cardNumber"
                        value={cardDetails.number}
                        onChange={(e) => setCardDetails((prev) => ({ ...prev, number: e.target.value }))}
                        placeholder="1234 5678 9012 3456"
                        maxLength={19}
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="expiry">Expiry Date</Label>
                        <Input
                          id="expiry"
                          value={cardDetails.expiry}
                          onChange={(e) => setCardDetails((prev) => ({ ...prev, expiry: e.target.value }))}
                          placeholder="MM/YY"
                          maxLength={5}
                        />
                      </div>
                      <div>
                        <Label htmlFor="cvv">CVV</Label>
                        <Input
                          id="cvv"
                          value={cardDetails.cvv}
                          onChange={(e) => setCardDetails((prev) => ({ ...prev, cvv: e.target.value }))}
                          placeholder="123"
                          maxLength={3}
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Delivery Information */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Truck className="h-5 w-5" />
                    Delivery Information
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center gap-3 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
                    <Calendar className="h-5 w-5 text-green-600" />
                    <div>
                      <p className="font-medium text-green-800 dark:text-green-400">Expected Delivery</p>
                      <p className="text-sm text-green-600 dark:text-green-300">
                        {expectedDelivery.toLocaleDateString("en-US", {
                          weekday: "long",
                          year: "numeric",
                          month: "long",
                          day: "numeric",
                        })}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Order Summary */}
            <div>
              <Card>
                <CardHeader>
                  <CardTitle>Order Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {items.map((item) => (
                    <div key={`${item.product_id}-${item.size}-${item.color}`} className="flex gap-3">
                      <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center">
                        <img
                          src={item.product_image || "/placeholder.svg"}
                          alt={item.product_name}
                          className="w-12 h-12 object-cover rounded"
                        />
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-sm">{item.product_name}</h4>
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                          {item.size} â€¢ {item.color}
                        </p>
                        <p className="text-xs text-gray-600 dark:text-gray-400">Qty: {item.quantity}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">${(item.price * item.quantity).toFixed(2)}</p>
                      </div>
                    </div>
                  ))}

                  <div className="border-t pt-4 space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Subtotal</span>
                      <span>${totalPrice.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Shipping</span>
                      <span>${shippingCost.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Tax</span>
                      <span>${tax.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between font-bold text-lg border-t pt-2">
                      <span>Total</span>
                      <span>${finalTotal.toFixed(2)}</span>
                    </div>
                  </div>

                  <Button
                    onClick={handlePayment}
                    disabled={isProcessing}
                    className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                  >
                    {isProcessing ? (
                      <div className="flex items-center gap-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
                        Processing Payment...
                      </div>
                    ) : (
                      `Pay $${finalTotal.toFixed(2)}`
                    )}
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

</payment/page.tsx>

<order-confirmation/page.tsx>
"use client"

import { useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { useAuth } from "@/contexts/auth-context"
import { Header } from "@/components/layout/header"
import { CheckCircle, Package, Truck, Calendar, ArrowRight } from "lucide-react"
import Link from "next/link"

export default function OrderConfirmationPage() {
  const { user } = useAuth()

  useEffect(() => {
    // Show success notification
    const timer = setTimeout(() => {
      // You could show a toast notification here
    }, 1000)

    return () => clearTimeout(timer)
  }, [])

  const orderId = `ORD-${Date.now()}`
  const expectedDelivery = new Date()
  expectedDelivery.setDate(expectedDelivery.getDate() + 5)

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Header />
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto">
          {/* Success Animation */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-green-100 dark:bg-green-900/20 rounded-full mb-4">
              <CheckCircle className="h-12 w-12 text-green-600" />
            </div>
            <h1 className="text-3xl font-bold text-green-800 dark:text-green-400 mb-2">Order Confirmed!</h1>
            <p className="text-gray-600 dark:text-gray-400">Thank you for your purchase, {user?.name}</p>
          </div>

          {/* Order Details */}
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Order Details</span>
                <Badge variant="outline" className="text-green-600 border-green-600">
                  Confirmed
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Order ID</p>
                  <p className="font-semibold">{orderId}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Order Date</p>
                  <p className="font-semibold">{new Date().toLocaleDateString()}</p>
                </div>
              </div>

              <div className="border-t pt-4">
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">Delivery Address</p>
                <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
                  <p className="font-semibold">{user?.name}</p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    123 Main Street, Apt 4B
                    <br />
                    New York, NY 10001
                    <br />
                    {user?.phone}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Delivery Timeline */}
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Truck className="h-5 w-5" />
                Delivery Timeline
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center">
                    <CheckCircle className="h-4 w-4 text-green-600" />
                  </div>
                  <div className="flex-1">
                    <p className="font-semibold">Order Confirmed</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{new Date().toLocaleString()}</p>
                  </div>
                </div>

                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center">
                    <Package className="h-4 w-4 text-blue-600" />
                  </div>
                  <div className="flex-1">
                    <p className="font-semibold">Processing</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">Expected within 24 hours</p>
                  </div>
                </div>

                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center">
                    <Truck className="h-4 w-4 text-gray-400" />
                  </div>
                  <div className="flex-1">
                    <p className="font-semibold text-gray-600 dark:text-gray-400">Shipped</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">Expected in 2-3 days</p>
                  </div>
                </div>

                <div className="flex items-center gap-4">
                  <div className="w-8 h-8 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center">
                    <Calendar className="h-4 w-4 text-gray-400" />
                  </div>
                  <div className="flex-1">
                    <p className="font-semibold text-gray-600 dark:text-gray-400">Delivered</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Expected by {expectedDelivery.toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Next Steps */}
          <Card>
            <CardHeader>
              <CardTitle>What's Next?</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-3">
                <Link href="/orders">
                  <Button variant="outline" className="w-full justify-between bg-transparent">
                    Track Your Order
                    <ArrowRight className="h-4 w-4" />
                  </Button>
                </Link>

                <Link href="/dashboard">
                  <Button variant="outline" className="w-full justify-between bg-transparent">
                    Continue Shopping
                    <ArrowRight className="h-4 w-4" />
                  </Button>
                </Link>
              </div>

              <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                <p className="text-sm text-blue-800 dark:text-blue-400">
                  ðŸ“§ A confirmation email has been sent to {user?.email}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

</order-confirmation/page.tsx>

<page.tsx>
"use client"

import { useAuth } from "@/contexts/auth-context"
import { useRouter } from "next/navigation"
import { useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import Link from "next/link"
import { ShoppingBag, Users, Shield } from "lucide-react"

export default function HomePage() {
  const { user } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (user) {
      if (user.role === "admin") {
        router.push("/admin")
      } else {
        router.push("/dashboard")
      }
    }
  }, [user, router])

  if (user) {
    return null // Will redirect
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900">
      <div className="container mx-auto px-4 py-16">
        <div className="text-center mb-16">
          <h1 className="text-6xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-6">
            StyleNest
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto">
            Discover premium fashion that speaks your style. From casual wear to luxury pieces, find everything you need
            to express yourself.
          </p>
          <div className="flex gap-4 justify-center">
            <Link href="/auth/login">
              <Button
                size="lg"
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
              >
                Get Started
              </Button>
            </Link>
            <Link href="/auth/register">
              <Button variant="outline" size="lg">
                Create Account
              </Button>
            </Link>
          </div>
        </div>

        <div className="grid md:grid-cols-3 gap-8 mb-16">
          <Card className="glassmorphism border-0">
            <CardContent className="p-8 text-center">
              <ShoppingBag className="h-12 w-12 mx-auto mb-4 text-purple-600" />
              <h3 className="text-xl font-semibold mb-2">Premium Collection</h3>
              <p className="text-gray-600 dark:text-gray-300">
                Curated selection of high-quality fashion items from top brands
              </p>
            </CardContent>
          </Card>

          <Card className="glassmorphism border-0">
            <CardContent className="p-8 text-center">
              <Users className="h-12 w-12 mx-auto mb-4 text-pink-600" />
              <h3 className="text-xl font-semibold mb-2">Community Driven</h3>
              <p className="text-gray-600 dark:text-gray-300">
                Join thousands of fashion enthusiasts sharing their style
              </p>
            </CardContent>
          </Card>

          <Card className="glassmorphism border-0">
            <CardContent className="p-8 text-center">
              <Shield className="h-12 w-12 mx-auto mb-4 text-blue-600" />
              <h3 className="text-xl font-semibold mb-2">Secure Shopping</h3>
              <p className="text-gray-600 dark:text-gray-300">
                Safe and secure transactions with multiple payment options
              </p>
            </CardContent>
          </Card>
        </div>

        <div className="text-center">
          <h2 className="text-3xl font-bold mb-4">Test Credentials</h2>
          <div className="grid md:grid-cols-2 gap-6 max-w-2xl mx-auto">
            <Card>
              <CardContent className="p-6">
                <h3 className="font-semibold mb-2">User Account</h3>
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  Email: user@example.com
                  <br />
                  Password: password123
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <h3 className="font-semibold mb-2">Admin Account</h3>
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  Email: admin@example.com
                  <br />
                  Password: admin123
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

</page.tsx>

<checkout/page.tsx>
// "use client"

// import { useState } from "react"
// import { useRouter } from "next/navigation"
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// import { Button } from "@/components/ui/button"
// import { Input } from "@/components/ui/input"
// import { Label } from "@/components/ui/label"
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
// import { Checkbox } from "@/components/ui/checkbox"
// import { useCart } from "@/contexts/cart-context"
// import { useAuth } from "@/contexts/auth-context"
// import { Header } from "@/components/layout/header"
// import { MapPin, Plus, Check } from "lucide-react"
// import type { Address } from "@/types"

// const dummyAddresses: Address[] = [
//   {
//     id: "addr-1",
//     user_id: "user-1",
//     name: "John Doe",
//     phone: "+1 (555) 123-4567",
//     address_line: "123 Main Street, Apt 4B",
//     city: "New York",
//     state: "NY",
//     zip: "10001",
//     country: "United States",
//     is_default: true,
//   },
//   {
//     id: "addr-2",
//     user_id: "user-1",
//     name: "John Doe",
//     phone: "+1 (555) 123-4567",
//     address_line: "456 Oak Avenue",
//     city: "Brooklyn",
//     state: "NY",
//     zip: "11201",
//     country: "United States",
//     is_default: false,
//   },
// ]

// export default function CheckoutPage() {
//   const { items, totalPrice } = useCart()
//   const { user } = useAuth()
//   const router = useRouter()
//   const [selectedAddress, setSelectedAddress] = useState("addr-1")
//   const [showAddressForm, setShowAddressForm] = useState(false)
//   const [addresses, setAddresses] = useState(dummyAddresses)
//   const [newAddress, setNewAddress] = useState({
//     name: user?.name || "",
//     phone: user?.phone || "",
//     address_line: "",
//     city: "",
//     state: "",
//     zip: "",
//     country: "United States",
//     is_default: false,
//   })

//   if (!user) {
//     router.push("/auth/login")
//     return null
//   }

//   if (items.length === 0) {
//     router.push("/cart")
//     return null
//   }

//   const handleAddAddress = () => {
//     const address: Address = {
//       id: `addr-${Date.now()}`,
//       user_id: user.id,
//       ...newAddress,
//     }

//     setAddresses((prev) => [...prev, address])
//     setSelectedAddress(address.id)
//     setShowAddressForm(false)
//     setNewAddress({
//       name: user?.name || "",
//       phone: user?.phone || "",
//       address_line: "",
//       city: "",
//       state: "",
//       zip: "",
//       country: "United States",
//       is_default: false,
//     })
//   }

//   const handleSetDefault = (addressId: string) => {
//     setAddresses((prev) =>
//       prev.map((addr) => ({
//         ...addr,
//         is_default: addr.id === addressId,
//       })),
//     )
//   }

//   const handleContinueToPayment = () => {
//     router.push("/payment")
//   }

//   const shippingCost = 9.99
//   const tax = totalPrice * 0.08
//   const finalTotal = totalPrice + shippingCost + tax

//   return (
//     <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
//       <Header />
//       <div className="container mx-auto px-4 py-8">
//         <div className="max-w-4xl mx-auto">
//           <h1 className="text-3xl font-bold mb-8">Checkout</h1>

//           <div className="grid lg:grid-cols-3 gap-8">
//             {/* Address Selection */}
//             <div className="lg:col-span-2 space-y-6">
//               <Card>
//                 <CardHeader>
//                   <CardTitle className="flex items-center gap-2">
//                     <MapPin className="h-5 w-5" />
//                     Delivery Address
//                   </CardTitle>
//                 </CardHeader>
//                 <CardContent className="space-y-4">
//                   <RadioGroup value={selectedAddress} onValueChange={setSelectedAddress}>
//                     {addresses.map((address) => (
//                       <div key={address.id} className="flex items-start space-x-3 p-4 border rounded-lg">
//                         <RadioGroupItem value={address.id} id={address.id} className="mt-1" />
//                         <div className="flex-1">
//                           <Label htmlFor={address.id} className="cursor-pointer">
//                             <div className="flex items-center gap-2 mb-1">
//                               <span className="font-semibold">{address.name}</span>
//                               {address.is_default && (
//                                 <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
//                                   Default
//                                 </span>
//                               )}
//                             </div>
//                             <p className="text-sm text-gray-600 dark:text-gray-400">{address.address_line}</p>
//                             <p className="text-sm text-gray-600 dark:text-gray-400">
//                               {address.city}, {address.state} {address.zip}
//                             </p>
//                             <p className="text-sm text-gray-600 dark:text-gray-400">{address.phone}</p>
//                           </Label>
//                           <div className="mt-2 flex gap-2">
//                             {!address.is_default && (
//                               <Button variant="outline" size="sm" onClick={() => handleSetDefault(address.id)}>
//                                 Set as Default
//                               </Button>
//                             )}
//                           </div>
//                         </div>
//                       </div>
//                     ))}
//                   </RadioGroup>

//                   {!showAddressForm ? (
//                     <Button variant="outline" onClick={() => setShowAddressForm(true)} className="w-full">
//                       <Plus className="h-4 w-4 mr-2" />
//                       Add New Address
//                     </Button>
//                   ) : (
//                     <div className="border rounded-lg p-4 space-y-4">
//                       <h3 className="font-semibold">Add New Address</h3>
//                       <div className="grid grid-cols-2 gap-4">
//                         <div>
//                           <Label htmlFor="name">Full Name</Label>
//                           <Input
//                             id="name"
//                             value={newAddress.name}
//                             onChange={(e) => setNewAddress((prev) => ({ ...prev, name: e.target.value }))}
//                           />
//                         </div>
//                         <div>
//                           <Label htmlFor="phone">Phone Number</Label>
//                           <Input
//                             id="phone"
//                             value={newAddress.phone}
//                             onChange={(e) => setNewAddress((prev) => ({ ...prev, phone: e.target.value }))}
//                           />
//                         </div>
//                       </div>
//                       <div>
//                         <Label htmlFor="address">Address Line</Label>
//                         <Input
//                           id="address"
//                           value={newAddress.address_line}
//                           onChange={(e) => setNewAddress((prev) => ({ ...prev, address_line: e.target.value }))}
//                         />
//                       </div>
//                       <div className="grid grid-cols-3 gap-4">
//                         <div>
//                           <Label htmlFor="city">City</Label>
//                           <Input
//                             id="city"
//                             value={newAddress.city}
//                             onChange={(e) => setNewAddress((prev) => ({ ...prev, city: e.target.value }))}
//                           />
//                         </div>
//                         <div>
//                           <Label htmlFor="state">State</Label>
//                           <Input
//                             id="state"
//                             value={newAddress.state}
//                             onChange={(e) => setNewAddress((prev) => ({ ...prev, state: e.target.value }))}
//                           />
//                         </div>
//                         <div>
//                           <Label htmlFor="zip">ZIP Code</Label>
//                           <Input
//                             id="zip"
//                             value={newAddress.zip}
//                             onChange={(e) => setNewAddress((prev) => ({ ...prev, zip: e.target.value }))}
//                           />
//                         </div>
//                       </div>
//                       <div className="flex items-center space-x-2">
//                         <Checkbox
//                           id="default"
//                           checked={newAddress.is_default}
//                           onCheckedChange={(checked) =>
//                             setNewAddress((prev) => ({ ...prev, is_default: checked as boolean }))
//                           }
//                         />
//                         <Label htmlFor="default">Set as default address</Label>
//                       </div>
//                       <div className="flex gap-2">
//                         <Button onClick={handleAddAddress}>
//                           <Check className="h-4 w-4 mr-2" />
//                           Add Address
//                         </Button>
//                         <Button variant="outline" onClick={() => setShowAddressForm(false)}>
//                           Cancel
//                         </Button>
//                       </div>
//                     </div>
//                   )}
//                 </CardContent>
//               </Card>
//             </div>

//             {/* Order Summary */}
//             <div>
//               <Card>
//                 <CardHeader>
//                   <CardTitle>Order Summary</CardTitle>
//                 </CardHeader>
//                 <CardContent className="space-y-4">
//                   {items.map((item) => (
//                     <div key={`${item.product_id}-${item.size}-${item.color}`} className="flex gap-3">
//                       <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center">
//                         <img
//                           src={item.product_image || "/placeholder.svg"}
//                           alt={item.product_name}
//                           className="w-12 h-12 object-cover rounded"
//                         />
//                       </div>
//                       <div className="flex-1">
//                         <h4 className="font-medium text-sm">{item.product_name}</h4>
//                         <p className="text-xs text-gray-600 dark:text-gray-400">
//                           {item.size} â€¢ {item.color}
//                         </p>
//                         <p className="text-xs text-gray-600 dark:text-gray-400">Qty: {item.quantity}</p>
//                       </div>
//                       <div className="text-right">
//                         <p className="font-medium">${(item.price * item.quantity).toFixed(2)}</p>
//                       </div>
//                     </div>
//                   ))}

//                   <div className="border-t pt-4 space-y-2">
//                     <div className="flex justify-between text-sm">
//                       <span>Subtotal</span>
//                       <span>${totalPrice.toFixed(2)}</span>
//                     </div>
//                     <div className="flex justify-between text-sm">
//                       <span>Shipping</span>
//                       <span>${shippingCost.toFixed(2)}</span>
//                     </div>
//                     <div className="flex justify-between text-sm">
//                       <span>Tax</span>
//                       <span>${tax.toFixed(2)}</span>
//                     </div>
//                     <div className="flex justify-between font-bold text-lg border-t pt-2">
//                       <span>Total</span>
//                       <span>${finalTotal.toFixed(2)}</span>
//                     </div>
//                   </div>

//                   <Button
//                     onClick={handleContinueToPayment}
//                     className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
//                   >
//                     Continue to Payment
//                   </Button>
//                 </CardContent>
//               </Card>
//             </div>
//           </div>
//         </div>
//       </div>
//     </div>
//   )
// }

</checkout/page.tsx>

<cart/page.tsx>
"use client"

import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import { CartItems } from "@/components/cart/cart-items"
import { CartSummary } from "@/components/cart/cart-summary"
import { useCart } from "@/contexts/cart-context"
import { Button } from "@/components/ui/button"
import { ShoppingBag } from "lucide-react"
import Link from "next/link"

export default function CartPage() {
  const { items, totalItems, totalPrice } = useCart()

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1">
        <div className="container py-8">
          <h1 className="text-3xl font-bold mb-8">Shopping Cart</h1>

          {items.length === 0 ? (
            <div className="text-center py-16">
              <ShoppingBag className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <h2 className="text-2xl font-semibold mb-2">Your cart is empty</h2>
              <p className="text-muted-foreground mb-6">Looks like you haven't added any items to your cart yet.</p>
              <Button asChild>
                <Link href="/products">Continue Shopping</Link>
              </Button>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2">
                <CartItems />
              </div>
              <div>
                <CartSummary />
              </div>
            </div>
          )}
        </div>
      </main>
      <Footer />
    </div>
  )
}

</cart/page.tsx>

<orders/page.tsx>
"use client"

import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Package, Eye, Calendar, DollarSign } from "lucide-react"
import { dummyOrders } from "@/lib/dummy-data"
import Link from "next/link"

export default function OrdersPage() {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1">
        <div className="container py-8">
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-2">Order History</h1>
            <p className="text-muted-foreground">Track and manage your orders</p>
          </div>

          {dummyOrders.length === 0 ? (
            <Card>
              <CardContent className="text-center py-16">
                <Package className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                <h2 className="text-2xl font-semibold mb-2">No orders yet</h2>
                <p className="text-muted-foreground mb-6">When you place your first order, it will appear here.</p>
                <Button asChild>
                  <Link href="/products">Start Shopping</Link>
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-6">
              {dummyOrders.map((order) => (
                <Card key={order.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-2">
                        <Package className="h-5 w-5" />
                        Order #{order.id}
                      </CardTitle>
                      <Badge
                        variant={order.status === "delivered" ? "default" : "secondary"}
                        className={order.status === "delivered" ? "bg-green-100 text-green-700" : ""}
                      >
                        {order.status}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4 text-muted-foreground" />
                        <div>
                          <p className="text-sm text-muted-foreground">Order Date</p>
                          <p className="font-medium">{new Date(order.created_at).toLocaleDateString()}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-muted-foreground" />
                        <div>
                          <p className="text-sm text-muted-foreground">Total Amount</p>
                          <p className="font-medium">${order.total_amount.toFixed(2)}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Package className="h-4 w-4 text-muted-foreground" />
                        <div>
                          <p className="text-sm text-muted-foreground">Payment Status</p>
                          <p className="font-medium capitalize">{order.payment_status}</p>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <h4 className="font-semibold">Items Ordered</h4>
                      {order.items.map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg">
                          <div>
                            <p className="font-medium">{item.product_name}</p>
                            <p className="text-sm text-muted-foreground">
                              Size: {item.size} | Color: {item.color} | Qty: {item.quantity}
                            </p>
                          </div>
                          <p className="font-semibold">${(item.price * item.quantity).toFixed(2)}</p>
                        </div>
                      ))}
                    </div>

                    <div className="flex justify-end mt-4">
                      <Button variant="outline" size="sm">
                        <Eye className="h-4 w-4 mr-2" />
                        View Details
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </main>
      <Footer />
    </div>
  )
}

</orders/page.tsx>

<wishlist/page.tsx>
// "use client"

// import { Header } from "@/components/layout/header"
// import { Footer } from "@/components/layout/footer"
// import { ProductCard } from "@/components/products/product-card"
// import { Card, CardContent } from "@/components/ui/card"
// import { Button } from "@/components/ui/button"
// import { Heart } from "lucide-react"
// import Link from "next/link"

// export default function WishlistPage() {
//   // Simulate wishlist with first 4 products
//   const wishlistProducts = dummyProducts.slice(0, 4)

//   return (
//     <div className="min-h-screen flex flex-col">
//       <Header />
//       <main className="flex-1">
//         <div className="container py-8">
//           <div className="mb-8">
//             <h1 className="text-3xl font-bold mb-2">My Wishlist</h1>
//             <p className="text-muted-foreground">Items you've saved for later</p>
//           </div>

//           {wishlistProducts.length === 0 ? (
//             <Card>
//               <CardContent className="text-center py-16">
//                 <Heart className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
//                 <h2 className="text-2xl font-semibold mb-2">Your wishlist is empty</h2>
//                 <p className="text-muted-foreground mb-6">Save items you love for later by clicking the heart icon.</p>
//                 <Button asChild>
//                   <Link href="/products">Browse Products</Link>
//                 </Button>
//               </CardContent>
//             </Card>
//           ) : (
//             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
//               {wishlistProducts.map((product) => (
//                 <ProductCard key={product.id} product={product} />
//               ))}
//             </div>
//           )}
//         </div>
//       </main>
//       <Footer />
//     </div>
//   )
// }

</wishlist/page.tsx>

<profile/page.tsx>
"use client"

import { useState, useEffect } from "react"
import { useAuth } from "@/contexts/auth-context"
import { useRouter } from "next/navigation"
import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useToast } from "@/hooks/use-toast"
import { Camera, Save, User } from "lucide-react"

export default function ProfilePage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    gender: "",
    dob: "",
    avatar_url: "",
  })
  const [isSaving, setIsSaving] = useState(false)

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/auth/login")
    }

    if (user) {
      setFormData({
        name: user.name || "",
        email: user.email || "",
        phone: user.phone || "",
        gender: user.gender || "",
        dob: user.dob || "",
        avatar_url: user.avatar_url || "",
      })
    }
  }, [user, isLoading, router])

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const handleAvatarUpload = () => {
    // Simulate avatar upload
    const newAvatarUrl = `/placeholder.svg?height=100&width=100&text=${formData.name.charAt(0)}`
    setFormData((prev) => ({ ...prev, avatar_url: newAvatarUrl }))
    toast({
      title: "Avatar updated",
      description: "Your profile picture has been updated successfully",
    })
  }

  const handleSave = async () => {
    setIsSaving(true)

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000))

      toast({
        title: "Profile updated",
        description: "Your profile has been updated successfully",
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 py-8">
        <div className="container max-w-2xl">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="h-5 w-5" />
                Profile Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Avatar Section */}
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <Avatar className="h-20 w-20">
                    <AvatarImage src={formData.avatar_url || "/placeholder.svg"} alt={formData.name} />
                    <AvatarFallback className="bg-gradient-to-br from-primary to-purple-600 text-white text-xl">
                      {formData.name
                        ?.split(" ")
                        .map((n) => n[0])
                        .join("")
                        .toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <Button
                    size="icon"
                    variant="secondary"
                    className="absolute -bottom-1 -right-1 h-8 w-8 rounded-full"
                    onClick={handleAvatarUpload}
                  >
                    <Camera className="h-4 w-4" />
                  </Button>
                </div>
                <div>
                  <h3 className="font-semibold text-lg">{formData.name}</h3>
                  <p className="text-muted-foreground">{formData.email}</p>
                </div>
              </div>

              {/* Form Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Full Name</Label>
                  <Input id="name" value={formData.name} onChange={(e) => handleInputChange("name", e.target.value)} />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange("email", e.target.value)}
                    disabled
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">Phone Number</Label>
                  <Input
                    id="phone"
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => handleInputChange("phone", e.target.value)}
                    placeholder="+1 (555) 123-4567"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="gender">Gender</Label>
                  <select
                    id="gender"
                    value={formData.gender}
                    onChange={(e) => handleInputChange("gender", e.target.value)}
                    className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  >
                    <option value="">Select Gender</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                    <option value="prefer-not-to-say">Prefer not to say</option>
                  </select>
                </div>

                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor="dob">Date of Birth</Label>
                  <Input
                    id="dob"
                    type="date"
                    value={formData.dob}
                    onChange={(e) => handleInputChange("dob", e.target.value)}
                  />
                </div>
              </div>

              {/* Save Button */}
              <div className="flex justify-end">
                <Button onClick={handleSave} disabled={isSaving}>
                  <Save className="h-4 w-4 mr-2" />
                  {isSaving ? "Saving..." : "Save Changes"}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      <Footer />
    </div>
  )
}

</profile/page.tsx>

<auth/register/page.tsx>
"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Eye, EyeOff } from "lucide-react"
import Link from "next/link"
import { useAuth } from "@/contexts/auth-context"
export default function RegisterPage() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
  })
  const [showPassword, setShowPassword] = useState(false)
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const { register } = useAuth()
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    const { name, email, password, confirmPassword } = formData

    if (password !== confirmPassword) {
      setError("Passwords do not match")
      return
    }

    setIsLoading(true)

    try {
      const success = await register(name, email, password)

      if (success) {
        router.push("/dashboard") // Or "/admin" if role-based routing is handled separately
      } else {
        setError("Registration failed. Please check your input and try again.")
      }
    } catch (err) {
      setError("Something went wrong. Please try again later.")
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }))
  }


  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 via-white to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            Create Account
          </CardTitle>
          <CardDescription>Join StyleNest and start shopping</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Full Name</Label>
              <Input
                id="name"
                name="name"
                type="text"
                placeholder="Enter your full name"
                value={formData.name}
                onChange={handleChange}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="Enter your email"
                value={formData.email}
                onChange={handleChange}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <div className="relative">
                <Input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="Create a password"
                  value={formData.password}
                  onChange={handleChange}
                  required
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </Button>
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
              <Input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                placeholder="Confirm your password"
                value={formData.confirmPassword}
                onChange={handleChange}
                required
              />
            </div>
            {error && <div className="text-red-500 text-sm">{error}</div>}
            <Button
              type="submit"
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
              disabled={isLoading}
            >
              {isLoading ? "Creating Account..." : "Create Account"}
            </Button>
          </form>
          <div className="mt-4 text-center text-sm">
            Already have an account?{" "}
            <Link href="/auth/login" className="text-purple-600 hover:underline">
              Sign in
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

</auth/register/page.tsx>

<auth/login/page.tsx>
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Eye, EyeOff, User, Shield } from "lucide-react"
import { useAuth } from "@/contexts/auth-context"
import Cookies from "js-cookie"

const testCredentials = {
  user: { email: "user@example.com", password: "password123" },
  admin: { email: "admin@example.com", password: "admin123" },
}

export default function LoginPage() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const { login } = useAuth()
  const router = useRouter()

  function decodeJWT<T = any>(token: string): T | null {
  try {
    const payloadBase64 = token.split(".")[1]
    const decodedPayload = atob(payloadBase64.replace(/-/g, "+").replace(/_/g, "/"))
    return JSON.parse(decodedPayload) as T
  } catch (err) {
    console.error("Failed to decode JWT:", err)
    return null
  }
}

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)

    try {
      const success = await login(email, password)
      if (success) {
        const token = Cookies.get("token")
        console.log("JWT Token:", token)
        const decodedToken = decodeJWT(token || "")
        console.log("Decoded Token:", decodedToken)
        if (decodedToken?.role === "admin") {
          console.log("Admin user detected, redirecting to admin dashboard")
          router.push("/admin")
        } else {
          router.push("/dashboard")
        }
      } else {
        setError("Invalid email or password")
      }
    } catch {
      setError("Login failed. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  const handleQuickLogin = async (type: "user" | "admin") => {
    const credentials = testCredentials[type]
    setEmail(credentials.email)
    setPassword(credentials.password)
    setError("")
    setIsLoading(true)

    try {
      const success = await login(credentials.email, credentials.password)
      if (success) {
        if (type === "admin") {
          router.push("/admin")
        } else {
          router.push("/dashboard")
        }
      }
    } catch {
      setError("Login failed. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }


  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl font-bold text-center">Welcome Back</CardTitle>
          <CardDescription className="text-center">Sign in to your StyleNest account</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Quick Login Buttons */}
          <div className="space-y-2">
            <p className="text-sm text-muted-foreground text-center">Quick Demo Login:</p>
            <div className="grid grid-cols-2 gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => handleQuickLogin("user")}
                disabled={isLoading}
                className="flex items-center gap-2"
              >
                <User className="h-4 w-4" />
                User Demo
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => handleQuickLogin("admin")}
                disabled={isLoading}
                className="flex items-center gap-2"
              >
                <Shield className="h-4 w-4" />
                Admin Demo
              </Button>
            </div>
          </div>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={isLoading}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="Enter your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  disabled={isLoading}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={isLoading}
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </Button>
              </div>
            </div>

            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Signing in..." : "Sign In"}
            </Button>
          </form>

          <div className="text-center space-y-2">
            <p className="text-sm text-muted-foreground">Demo Credentials:</p>
            <div className="text-xs space-y-1 bg-muted p-2 rounded">
              <p>
                <strong>User:</strong> user@example.com / password123
              </p>
              <p>
                <strong>Admin:</strong> admin@example.com / admin123
              </p>
            </div>
          </div>

          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Don't have an account?{" "}
              <Button variant="link" className="p-0 h-auto" onClick={() => router.push("/auth/register")}>
                Sign up
              </Button>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

</auth/login/page.tsx>

<auth/forgot/page.tsx>
"use client"

import { useState } from "react"
import { authApi } from "@/lib/api/auth"

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState("")
  const [message, setMessage] = useState("")
  const [error, setError] = useState("")

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setMessage("")
    setError("")

    try {
      const res = await authApi.forgotPassword(email)
      setMessage(res.message || "Reset link sent to your email.")
    } catch (err) {
      setError("Email not found or failed to send reset link.")
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4 max-w-md mx-auto mt-10">
      <h2 className="text-xl font-bold">Forgot Password</h2>
      <input
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Enter your email"
        className="border p-2 w-full"
        required
      />
      <button type="submit" className="bg-black text-white px-4 py-2 rounded">
        Send Reset Link
      </button>
      {message && <p className="text-green-600">{message}</p>}
      {error && <p className="text-red-600">{error}</p>}
    </form>
  )
}

</auth/forgot/page.tsx>

<auth/reset/[token]/page.tsx>
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { authApi } from "@/lib/api/auth"

export default function ResetPasswordPage({ params }: { params: { token: string } }) {
  const [newPassword, setNewPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [error, setError] = useState("")
  const [message, setMessage] = useState("")
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setMessage("")

    if (newPassword !== confirmPassword) {
      setError("Passwords do not match")
      return
    }

    try {
      const res = await authApi.resetPassword({ token: params.token, newPassword })
      setMessage(res.message || "Password reset successful")
      setTimeout(() => router.push("/auth/login"), 2000)
    } catch (err: any) {
        const errorMsg = err?.response?.data?.message || "Invalid or expired token"
        setError(errorMsg)
}


  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4 max-w-md mx-auto mt-10">
      <h2 className="text-xl font-bold">Reset Password</h2>
      <input
        type="password"
        value={newPassword}
        onChange={(e) => setNewPassword(e.target.value)}
        placeholder="New Password"
        className="border p-2 w-full"
        required
      />
      <input
        type="password"
        value={confirmPassword}
        onChange={(e) => setConfirmPassword(e.target.value)}
        placeholder="Confirm Password"
        className="border p-2 w-full"
        required
      />
      <button type="submit" className="bg-black text-white px-4 py-2 rounded">
        Reset Password
      </button>
      {message && <p className="text-green-600">{message}</p>}
      {error && <p className="text-red-600">{error}</p>}
    </form>
  )
}

</auth/reset/[token]/page.tsx>

<refunds/page.tsx>
// "use client"

// import { useState, useEffect } from "react"
// import { useAuth } from "@/contexts/auth-context"
// import { useRouter } from "next/navigation"
// import { Header } from "@/components/layout/header"
// import { Footer } from "@/components/layout/footer"
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// import { Badge } from "@/components/ui/badge"
// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
// import { RefreshCw, Clock, CheckCircle, XCircle, AlertCircle } from "lucide-react"

// interface Refund {
//   id: string
//   orderId: string
//   amount: number
//   reason: string
//   status: "pending" | "approved" | "processed" | "rejected"
//   requestDate: string
//   processedDate?: string
//   estimatedProcessingTime: string
// }

// const dummyRefunds: Refund[] = [
//   {
//     id: "REF-001",
//     orderId: "ORD-12345",
//     amount: 89.99,
//     reason: "Item not as described",
//     status: "processed",
//     requestDate: "2024-01-15",
//     processedDate: "2024-01-18",
//     estimatedProcessingTime: "3-5 business days",
//   },
//   {
//     id: "REF-002",
//     orderId: "ORD-12346",
//     amount: 129.99,
//     reason: "Wrong size received",
//     status: "approved",
//     requestDate: "2024-01-20",
//     estimatedProcessingTime: "5-7 business days",
//   },
//   {
//     id: "REF-003",
//     orderId: "ORD-12347",
//     amount: 59.99,
//     reason: "Damaged during shipping",
//     status: "pending",
//     requestDate: "2024-01-22",
//     estimatedProcessingTime: "7-10 business days",
//   },
//   {
//     id: "REF-004",
//     orderId: "ORD-12348",
//     amount: 199.99,
//     reason: "Changed mind",
//     status: "rejected",
//     requestDate: "2024-01-10",
//     processedDate: "2024-01-12",
//     estimatedProcessingTime: "N/A",
//   },
// ]

// export default function RefundsPage() {
//   const { user, isLoading } = useAuth()
//   const router = useRouter()
//   const [selectedTab, setSelectedTab] = useState("all")

//   useEffect(() => {
//     if (!isLoading && !user) {
//       router.push("/auth/login")
//     }
//   }, [user, isLoading, router])

//   const getStatusIcon = (status: string) => {
//     switch (status) {
//       case "pending":
//         return <Clock className="h-4 w-4" />
//       case "approved":
//         return <AlertCircle className="h-4 w-4" />
//       case "processed":
//         return <CheckCircle className="h-4 w-4" />
//       case "rejected":
//         return <XCircle className="h-4 w-4" />
//       default:
//         return <Clock className="h-4 w-4" />
//     }
//   }

//   const getStatusColor = (status: string) => {
//     switch (status) {
//       case "pending":
//         return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400"
//       case "approved":
//         return "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400"
//       case "processed":
//         return "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
//       case "rejected":
//         return "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400"
//       default:
//         return "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400"
//     }
//   }

//   const filteredRefunds =
//     selectedTab === "all" ? dummyRefunds : dummyRefunds.filter((refund) => refund.status === selectedTab)

//   if (isLoading) {
//     return (
//       <div className="min-h-screen flex items-center justify-center">
//         <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
//       </div>
//     )
//   }

//   if (!user) {
//     return null
//   }

//   return (
//     <div className="min-h-screen flex flex-col">
//       <Header />
//       <main className="flex-1 py-8">
//         <div className="container max-w-4xl">
//           <div className="flex items-center gap-2 mb-8">
//             <RefreshCw className="h-6 w-6" />
//             <h1 className="text-3xl font-bold">Refund Tracking</h1>
//           </div>

//           <Tabs value={selectedTab} onValueChange={setSelectedTab}>
//             <TabsList className="grid w-full grid-cols-5">
//               <TabsTrigger value="all">All Refunds</TabsTrigger>
//               <TabsTrigger value="pending">Pending</TabsTrigger>
//               <TabsTrigger value="approved">Approved</TabsTrigger>
//               <TabsTrigger value="processed">Processed</TabsTrigger>
//               <TabsTrigger value="rejected">Rejected</TabsTrigger>
//             </TabsList>

//             <TabsContent value={selectedTab} className="mt-6">
//               <div className="space-y-4">
//                 {filteredRefunds.length === 0 ? (
//                   <Card>
//                     <CardContent className="text-center py-16">
//                       <RefreshCw className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
//                       <h3 className="text-xl font-semibold mb-2">No refunds found</h3>
//                       <p className="text-muted-foreground">
//                         {selectedTab === "all"
//                           ? "You haven't requested any refunds yet."
//                           : `No ${selectedTab} refunds found.`}
//                       </p>
//                     </CardContent>
//                   </Card>
//                 ) : (
//                   filteredRefunds.map((refund) => (
//                     <Card key={refund.id}>
//                       <CardHeader>
//                         <div className="flex items-center justify-between">
//                           <CardTitle className="text-lg">Refund {refund.id}</CardTitle>
//                           <Badge className={getStatusColor(refund.status)}>
//                             <div className="flex items-center gap-1">
//                               {getStatusIcon(refund.status)}
//                               {refund.status.charAt(0).toUpperCase() + refund.status.slice(1)}
//                             </div>
//                           </Badge>
//                         </div>
//                       </CardHeader>
//                       <CardContent className="space-y-4">
//                         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//                           <div>
//                             <p className="text-sm font-medium text-muted-foreground">Order ID</p>
//                             <p className="font-semibold">{refund.orderId}</p>
//                           </div>
//                           <div>
//                             <p className="text-sm font-medium text-muted-foreground">Refund Amount</p>
//                             <p className="font-semibold text-lg text-primary">${refund.amount.toFixed(2)}</p>
//                           </div>
//                           <div>
//                             <p className="text-sm font-medium text-muted-foreground">Request Date</p>
//                             <p className="font-semibold">
//                               {new Date(refund.requestDate).toLocaleDateString("en-US", {
//                                 year: "numeric",
//                                 month: "long",
//                                 day: "numeric",
//                               })}
//                             </p>
//                           </div>
//                         </div>

//                         <div>
//                           <p className="text-sm font-medium text-muted-foreground mb-1">Reason</p>
//                           <p>{refund.reason}</p>
//                         </div>

//                         {refund.status === "processed" && refund.processedDate && (
//                           <div className="p-4 bg-green-50 dark:bg-green-950/20 rounded-lg border border-green-200 dark:border-green-800">
//                             <div className="flex items-center gap-2 mb-2">
//                               <CheckCircle className="h-5 w-5 text-green-600" />
//                               <p className="font-medium text-green-800 dark:text-green-200">Refund Processed</p>
//                             </div>
//                             <p className="text-sm text-green-600 dark:text-green-400">
//                               Processed on{" "}
//                               {new Date(refund.processedDate).toLocaleDateString("en-US", {
//                                 year: "numeric",
//                                 month: "long",
//                                 day: "numeric",
//                               })}
//                               . The refund should appear in your account within 3-5 business days.
//                             </p>
//                           </div>
//                         )}

//                         {refund.status === "approved" && (
//                           <div className="p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800">
//                             <div className="flex items-center gap-2 mb-2">
//                               <AlertCircle className="h-5 w-5 text-blue-600" />
//                               <p className="font-medium text-blue-800 dark:text-blue-200">Refund Approved</p>
//                             </div>
//                             <p className="text-sm text-blue-600 dark:text-blue-400">
//                               Your refund has been approved and is being processed. Estimated processing time:{" "}
//                               {refund.estimatedProcessingTime}
//                             </p>
//                           </div>
//                         )}

//                         {refund.status === "pending" && (
//                           <div className="p-4 bg-yellow-50 dark:bg-yellow-950/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
//                             <div className="flex items-center gap-2 mb-2">
//                               <Clock className="h-5 w-5 text-yellow-600" />
//                               <p className="font-medium text-yellow-800 dark:text-yellow-200">Under Review</p>
//                             </div>
//                             <p className="text-sm text-yellow-600 dark:text-yellow-400">
//                               Your refund request is being reviewed by our team. Estimated processing time:{" "}
//                               {refund.estimatedProcessingTime}
//                             </p>
//                           </div>
//                         )}

//                         {refund.status === "rejected" && (
//                           <div className="p-4 bg-red-50 dark:bg-red-950/20 rounded-lg border border-red-200 dark:border-red-800">
//                             <div className="flex items-center gap-2 mb-2">
//                               <XCircle className="h-5 w-5 text-red-600" />
//                               <p className="font-medium text-red-800 dark:text-red-200">Refund Rejected</p>
//                             </div>
//                             <p className="text-sm text-red-600 dark:text-red-400">
//                               Your refund request has been rejected. Please contact support for more information.
//                             </p>
//                           </div>
//                         )}
//                       </CardContent>
//                     </Card>
//                   ))
//                 )}
//               </div>
//             </TabsContent>
//           </Tabs>
//         </div>
//       </main>
//       <Footer />
//     </div>
//   )
// }

</refunds/page.tsx>

<categories/[gender]/page.tsx>
"use client"

import { useState, useEffect } from "react"
import { useQuery } from "@tanstack/react-query"
import { useParams } from "next/navigation"
import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import { ProductCard } from "@/components/products/product-card"
import { ProductCardSkeleton } from "@/components/products/product-card-skeleton"
import { ProductFilters } from "@/components/products/product-filters"
import { productsApi } from "@/lib/api/products"
import { Button } from "@/components/ui/button"
import { Filter } from "lucide-react"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"

export default function CategoryPage() {
  const params = useParams()
  const gender = params.gender as string

  const [filters, setFilters] = useState({
    categoryId: "",
    brand: "",
    priceRange: "",
    sortBy: "",
    search: "",
    gender: gender, // Add gender filter
  })

  // Update gender filter when route changes
  useEffect(() => {
    setFilters((prev) => ({ ...prev, gender: gender }))
  }, [gender])

  const {
    data: products,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["products", filters],
    queryFn: () => productsApi.getProducts(filters),
  })

  const { data: categories } = useQuery({
    queryKey: ["categories"],
    queryFn: productsApi.getCategories,
  })

  // Get category name for display
  const categoryName = gender.charAt(0).toUpperCase() + gender.slice(1)
  const categoryDescription = `Discover our ${categoryName.toLowerCase()}'s collection featuring the latest trends and timeless classics.`

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1">
        {/* Hero Section */}
        <section className="bg-gradient-to-r from-primary/20 via-purple-500/20 to-pink-500/20 py-16">
          <div className="container text-center">
            <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary via-purple-600 to-pink-600 bg-clip-text text-transparent">
              {categoryName}'s Fashion
            </h1>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">{categoryDescription}</p>
          </div>
        </section>

        <div className="container py-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold">Shop {categoryName}'s Collection</h2>
              <p className="text-muted-foreground mt-2">
                {products ? `${products.length} products found` : "Loading products..."}
              </p>
            </div>

            {/* Mobile Filter Button */}
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" className="lg:hidden bg-transparent">
                  <Filter className="h-4 w-4 mr-2" />
                  Filters
                </Button>
              </SheetTrigger>
              <SheetContent side="left">
                <ProductFilters
                  filters={filters}
                  onFiltersChange={setFilters}
                  categories={categories?.filter((cat) => cat.gender.toLowerCase() === gender.toLowerCase())}
                />
              </SheetContent>
            </Sheet>
          </div>

          <div className="flex gap-8">
            {/* Desktop Filters */}
            <div className="hidden lg:block w-64 flex-shrink-0">
              <ProductFilters
                filters={filters}
                onFiltersChange={setFilters}
                categories={categories?.filter((cat) => cat.gender.toLowerCase() === gender.toLowerCase())}
              />
            </div>

            {/* Products Grid */}
            <div className="flex-1">
              {error && (
                <div className="text-center py-12">
                  <p className="text-red-500">Error loading products. Please try again.</p>
                </div>
              )}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {isLoading
                  ? Array.from({ length: 12 }).map((_, i) => <ProductCardSkeleton key={i} />)
                  : products && Array.isArray(products)
                    ? products.map((product) => <ProductCard key={product.id} product={product} />)
                    : null}
              </div>

              {products && Array.isArray(products) && products.length === 0 && (
                <div className="text-center py-12">
                  <p className="text-muted-foreground">No products found matching your criteria.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  )
}

</categories/[gender]/page.tsx>

<settings/page.tsx>
"use client"

import { useState, useEffect } from "react"
import { useAuth } from "@/contexts/auth-context"
import { useRouter } from "next/navigation"
import { useTheme } from "next-themes"
import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { useToast } from "@/hooks/use-toast"
import { Moon, Sun, Lock, Mail, Phone, HelpCircle, Info, Trash2, ExternalLink } from "lucide-react"

export default function SettingsPage() {
  const { user, isLoading, logout } = useAuth()
  const { theme, setTheme } = useTheme()
  const router = useRouter()
  const { toast } = useToast()

  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  })
  const [isChangingPassword, setIsChangingPassword] = useState(false)

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/auth/login")
    }
  }, [user, isLoading, router])

  const handlePasswordChange = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      toast({
        title: "Password mismatch",
        description: "New password and confirm password do not match",
        variant: "destructive",
      })
      return
    }

    if (passwordData.newPassword.length < 6) {
      toast({
        title: "Password too short",
        description: "Password must be at least 6 characters long",
        variant: "destructive",
      })
      return
    }

    setIsChangingPassword(true)

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000))

      setPasswordData({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      })

      toast({
        title: "Password updated",
        description: "Your password has been changed successfully",
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to change password",
        variant: "destructive",
      })
    } finally {
      setIsChangingPassword(false)
    }
  }

  const handleDeleteAccount = () => {
    toast({
      title: "Account deletion",
      description: "Please contact support to delete your account",
      variant: "destructive",
    })
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 py-8">
        <div className="container max-w-2xl space-y-6">
          <div>
            <h1 className="text-3xl font-bold">Settings</h1>
            <p className="text-muted-foreground">Manage your account settings and preferences</p>
          </div>

          {/* Theme Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {theme === "dark" ? <Moon className="h-5 w-5" /> : <Sun className="h-5 w-5" />}
                Appearance
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label>Dark Mode</Label>
                  <p className="text-sm text-muted-foreground">Switch between light and dark themes</p>
                </div>
                <Switch
                  checked={theme === "dark"}
                  onCheckedChange={(checked) => setTheme(checked ? "dark" : "light")}
                />
              </div>
            </CardContent>
          </Card>

          {/* Password Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lock className="h-5 w-5" />
                Change Password
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="currentPassword">Current Password</Label>
                <Input
                  id="currentPassword"
                  type="password"
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData((prev) => ({ ...prev, currentPassword: e.target.value }))}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="newPassword">New Password</Label>
                <Input
                  id="newPassword"
                  type="password"
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData((prev) => ({ ...prev, newPassword: e.target.value }))}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirmPassword">Confirm New Password</Label>
                <Input
                  id="confirmPassword"
                  type="password"
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData((prev) => ({ ...prev, confirmPassword: e.target.value }))}
                />
              </div>

              <Button
                onClick={handlePasswordChange}
                disabled={isChangingPassword || !passwordData.currentPassword || !passwordData.newPassword}
              >
                {isChangingPassword ? "Changing..." : "Change Password"}
              </Button>
            </CardContent>
          </Card>

          {/* Support & Help */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <HelpCircle className="h-5 w-5" />
                Support & Help
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button variant="outline" className="justify-start h-auto p-4 bg-transparent">
                  <div className="flex items-center gap-3">
                    <Mail className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <p className="font-medium">Contact Us</p>
                      <p className="text-sm text-muted-foreground">support@stylenest.com</p>
                    </div>
                  </div>
                </Button>

                <Button variant="outline" className="justify-start h-auto p-4 bg-transparent">
                  <div className="flex items-center gap-3">
                    <Phone className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <p className="font-medium">Call Support</p>
                      <p className="text-sm text-muted-foreground">+1 (555) 123-4567</p>
                    </div>
                  </div>
                </Button>

                <Button variant="outline" className="justify-start h-auto p-4 bg-transparent">
                  <div className="flex items-center gap-3">
                    <HelpCircle className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <p className="font-medium">Help Center</p>
                      <p className="text-sm text-muted-foreground">FAQs and guides</p>
                    </div>
                    <ExternalLink className="h-4 w-4 ml-auto" />
                  </div>
                </Button>

                <Button variant="outline" className="justify-start h-auto p-4 bg-transparent">
                  <div className="flex items-center gap-3">
                    <Info className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <p className="font-medium">About Us</p>
                      <p className="text-sm text-muted-foreground">Learn more about StyleNest</p>
                    </div>
                    <ExternalLink className="h-4 w-4 ml-auto" />
                  </div>
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Danger Zone */}
          <Card className="border-red-200 dark:border-red-800">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-red-600">
                <Trash2 className="h-5 w-5" />
                Danger Zone
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="p-4 bg-red-50 dark:bg-red-950/20 rounded-lg border border-red-200 dark:border-red-800">
                <h4 className="font-medium text-red-800 dark:text-red-200 mb-2">Delete Account</h4>
                <p className="text-sm text-red-600 dark:text-red-400 mb-4">
                  Once you delete your account, there is no going back. Please be certain.
                </p>
                <Button variant="destructive" onClick={handleDeleteAccount}>
                  Delete Account
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      <Footer />
    </div>
  )
}

</settings/page.tsx>

<globals.css>
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 262 83% 58%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 262 83% 58%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 262 83% 58%;
    --primary-foreground: 210 40% 98%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 262 83% 58%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Custom gradient backgrounds */
.gradient-bg {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.gradient-purple {
  background: linear-gradient(135deg, #a855f7 0%, #3b82f6 100%);
}

.gradient-pink {
  background: linear-gradient(135deg, #ec4899 0%, #8b5cf6 100%);
}

.gradient-orange {
  background: linear-gradient(135deg, #f97316 0%, #ef4444 100%);
}

.gradient-text {
  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--chart-1)));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Enhanced animations */
@keyframes float {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

.float-animation {
  animation: float 3s ease-in-out infinite;
}

/* Glassmorphism effect */
.glassmorphism {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.dark .glassmorphism {
  background: rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

</globals.css>

<admin/payments/loading.tsx>
export default function Loading() {
  return null
}

</admin/payments/loading.tsx>

<admin/payments/page.tsx>
"use client"

import { useState } from "react"
import { useQuery } from "@tanstack/react-query"
import { AdminLayout } from "@/components/admin/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Search,
  MoreHorizontal,
  Eye,
  RefreshCw,
  CreditCard,
  DollarSign,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  XCircle,
} from "lucide-react"
import { adminApi } from "@/lib/api/admin"
import { dummyUsers } from "@/lib/dummy-data"
import { useToast } from "@/hooks/use-toast"

export default function AdminPaymentsPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedTab, setSelectedTab] = useState("all")
  const { toast } = useToast()

  const {
    data: payments,
    isLoading,
    refetch,
  } = useQuery({
    queryKey: ["admin-payments"],
    queryFn: adminApi.getPayments,
  })

  // Filter payments based on search and status
  const filteredPayments =
    payments?.filter((payment) => {
      const matchesSearch =
        payment.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        payment.order_id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        payment.txn_ref?.toLowerCase().includes(searchQuery.toLowerCase())

      const matchesTab =
        selectedTab === "all" ||
        (selectedTab === "successful" && payment.status === "success") ||
        (selectedTab === "pending" && payment.status === "pending") ||
        (selectedTab === "failed" && payment.status === "failed") ||
        (selectedTab === "refunded" && payment.status === "refunded")

      return matchesSearch && matchesTab
    }) || []

  const handleRefund = async (paymentId: string, amount: number) => {
    if (window.confirm(`Are you sure you want to refund $${amount.toFixed(2)}?`)) {
      try {
        await adminApi.processRefund(paymentId, amount)
        toast({
          title: "Refund initiated",
          description: "The refund has been processed successfully.",
        })
        refetch()
      } catch (error) {
        toast({
          title: "Error",
          description: "Failed to process refund. Please try again.",
          variant: "destructive",
        })
      }
    }
  }

  const handleUpdatePaymentStatus = async (paymentId: string, newStatus: string) => {
    try {
      await adminApi.updatePaymentStatus(paymentId, newStatus)
      toast({
        title: "Payment status updated",
        description: `Payment status has been updated to ${newStatus}.`,
      })
      refetch()
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update payment status. Please try again.",
        variant: "destructive",
      })
    }
  }

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      success: { variant: "default" as const, color: "bg-green-100 text-green-700", icon: CheckCircle },
      pending: { variant: "secondary" as const, color: "bg-yellow-100 text-yellow-700", icon: AlertCircle },
      failed: { variant: "destructive" as const, color: "bg-red-100 text-red-700", icon: XCircle },
      refunded: { variant: "outline" as const, color: "bg-blue-100 text-blue-700", icon: RefreshCw },
    }

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending
    const Icon = config.icon

    return (
      <Badge variant={config.variant} className={config.color}>
        <Icon className="h-3 w-3 mr-1" />
        {status}
      </Badge>
    )
  }

  const getUserName = (userId: string) => {
    const user = dummyUsers.find((u) => u.id === userId)
    return user ? user.name : `User ${userId.slice(-4)}`
  }

  const getPaymentStats = () => {
    if (!payments) return { total: 0, successful: 0, pending: 0, failed: 0, refunded: 0, totalAmount: 0 }

    return {
      total: payments.length,
      successful: payments.filter((p) => p.status === "success").length,
      pending: payments.filter((p) => p.status === "pending").length,
      failed: payments.filter((p) => p.status === "failed").length,
      refunded: payments.filter((p) => p.status === "refunded").length,
      totalAmount: payments.filter((p) => p.status === "success").reduce((sum, p) => sum + p.amount, 0),
    }
  }

  const stats = getPaymentStats()

  if (isLoading) {
    return (
      <AdminLayout>
        <div className="space-y-6">
          <h1 className="text-3xl font-bold">Payments Management</h1>
          <Card>
            <CardContent className="p-6">
              <div className="animate-pulse space-y-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <div key={i} className="h-16 bg-muted rounded"></div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </AdminLayout>
    )
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Payments Management</h1>
            <p className="text-muted-foreground">
              Monitor payments, process refunds, and manage transactions ({stats.total} payments)
            </p>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-6 gap-6">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total Revenue</p>
                  <p className="text-2xl font-bold text-green-600">${stats.totalAmount.toFixed(2)}</p>
                </div>
                <DollarSign className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Successful</p>
                  <p className="text-2xl font-bold text-green-600">{stats.successful}</p>
                </div>
                <CheckCircle className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Pending</p>
                  <p className="text-2xl font-bold text-yellow-600">{stats.pending}</p>
                </div>
                <AlertCircle className="h-8 w-8 text-yellow-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Failed</p>
                  <p className="text-2xl font-bold text-red-600">{stats.failed}</p>
                </div>
                <XCircle className="h-8 w-8 text-red-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Refunded</p>
                  <p className="text-2xl font-bold text-blue-600">{stats.refunded}</p>
                </div>
                <RefreshCw className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Success Rate</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {stats.total > 0 ? ((stats.successful / stats.total) * 100).toFixed(1) : 0}%
                  </p>
                </div>
                <TrendingUp className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Payments Table with Tabs */}
        <Card>
          <CardHeader>
            <CardTitle>Payment Transactions</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-4">
              <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
                <TabsList>
                  <TabsTrigger value="all">All Payments</TabsTrigger>
                  <TabsTrigger value="successful">Successful</TabsTrigger>
                  <TabsTrigger value="pending">Pending</TabsTrigger>
                  <TabsTrigger value="failed">Failed</TabsTrigger>
                  <TabsTrigger value="refunded">Refunded</TabsTrigger>
                </TabsList>

                <div className="relative">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search payments..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-8 w-64"
                  />
                </div>
              </div>

              <TabsContent value={selectedTab} className="space-y-4">
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Payment ID</TableHead>
                        <TableHead>Order ID</TableHead>
                        <TableHead>Customer</TableHead>
                        <TableHead>Amount</TableHead>
                        <TableHead>Gateway</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Transaction Ref</TableHead>
                        <TableHead>Date</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredPayments.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={9} className="text-center py-8 text-muted-foreground">
                            No payments found matching your criteria.
                          </TableCell>
                        </TableRow>
                      ) : (
                        filteredPayments.map((payment) => (
                          <TableRow key={payment.id}>
                            <TableCell className="font-medium">#{payment.id}</TableCell>
                            <TableCell>#{payment.order_id}</TableCell>
                            <TableCell>{getUserName(payment.user_id)}</TableCell>
                            <TableCell className="font-semibold">${payment.amount.toFixed(2)}</TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <CreditCard className="h-4 w-4" />
                                {payment.gateway}
                              </div>
                            </TableCell>
                            <TableCell>{getStatusBadge(payment.status)}</TableCell>
                            <TableCell className="font-mono text-sm">{payment.txn_ref || "N/A"}</TableCell>
                            <TableCell>{new Date(payment.created_at).toLocaleDateString()}</TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem>
                                    <Eye className="h-4 w-4 mr-2" />
                                    View Details
                                  </DropdownMenuItem>
                                  {payment.status === "pending" && (
                                    <>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuItem
                                        onClick={() => handleUpdatePaymentStatus(payment.id, "success")}
                                      >
                                        Mark as Success
                                      </DropdownMenuItem>
                                      <DropdownMenuItem onClick={() => handleUpdatePaymentStatus(payment.id, "failed")}>
                                        Mark as Failed
                                      </DropdownMenuItem>
                                    </>
                                  )}
                                  {payment.status === "success" && (
                                    <>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuItem
                                        className="text-orange-600"
                                        onClick={() => handleRefund(payment.id, payment.amount)}
                                      >
                                        <RefreshCw className="h-4 w-4 mr-2" />
                                        Process Refund
                                      </DropdownMenuItem>
                                    </>
                                  )}
                                  {payment.status === "failed" && (
                                    <>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuItem
                                        onClick={() => handleUpdatePaymentStatus(payment.id, "pending")}
                                      >
                                        <RefreshCw className="h-4 w-4 mr-2" />
                                        Retry Payment
                                      </DropdownMenuItem>
                                    </>
                                  )}
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </AdminLayout>
  )
}

</admin/payments/page.tsx>

<admin/page.tsx>
"use client"

import { useAuth } from "@/contexts/auth-context"
import { useRouter } from "next/navigation"
import { useEffect } from "react"
import { AdminLayout } from "@/components/admin/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Users, ShoppingBag, DollarSign, Package, TrendingUp, AlertTriangle } from "lucide-react"
import { useQuery } from "@tanstack/react-query"
import { adminApi } from "@/lib/api/admin"
import type { ActivityItem } from "@/types"

export default function AdminDashboard() {
  const { user, isLoading: authLoading } = useAuth()
  const router = useRouter()

  const {
    data: dashboardData,
    isLoading: dashboardLoading,
    isError,
  } = useQuery({
    queryKey: ["admin-dashboard"],
    queryFn: adminApi.getDashboard,
  })

  const {
    data: recentActivity = [],
    isLoading: activityLoading,
  } = useQuery<ActivityItem[]>({
    queryKey: ["admin-recent-activity"],
    queryFn: adminApi.getRecentActivity,
  })

  useEffect(() => {
    if (!authLoading && (!user || user.role !== "admin")) {
      router.push("/")
    }
  }, [user, authLoading, router])

  if (authLoading || dashboardLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary" />
      </div>
    )
  }

  if (!user || user.role !== "admin" || isError || !dashboardData) {
    return null
  }

  const {
    total_users = 0,
    total_orders = 0,
    total_revenue = 0,
    low_stock_items = [],
  } = dashboardData

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold">Dashboard Overview</h1>
          <p className="text-muted-foreground">Welcome back, {user.name}!</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200 dark:border-blue-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-blue-600 dark:text-blue-400">Total Users</p>
                  <p className="text-2xl font-bold text-blue-700 dark:text-blue-300">
                    {total_users.toLocaleString()}
                  </p>
                </div>
                <Users className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200 dark:border-green-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-green-600 dark:text-green-400">Total Orders</p>
                  <p className="text-2xl font-bold text-green-700 dark:text-green-300">
                    {total_orders.toLocaleString()}
                  </p>
                </div>
                <ShoppingBag className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200 dark:border-purple-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-purple-600 dark:text-purple-400">Total Revenue</p>
                  <p className="text-2xl font-bold text-purple-700 dark:text-purple-300">
                    ${total_revenue.toLocaleString()}
                  </p>
                </div>
                <DollarSign className="h-8 w-8 text-purple-500" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200 dark:border-orange-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-orange-600 dark:text-orange-400">Low Stock Items</p>
                  <p className="text-2xl font-bold text-orange-700 dark:text-orange-300">
                    {low_stock_items.length}
                  </p>
                </div>
                <AlertTriangle className="h-8 w-8 text-orange-500" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Recent Activity & Low Stock Details */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Real Recent Activity */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                Recent Activity
              </CardTitle>
            </CardHeader>
            <CardContent>
              {activityLoading ? (
                <p className="text-muted-foreground">Loading...</p>
              ) : (
                <div className="space-y-4">
                  {recentActivity.length === 0 ? (
                    <p className="text-sm text-muted-foreground">No recent activity</p>
                  ) : (
                    recentActivity.map((item, idx) => (
                      <div
                        key={idx}
                        className="flex items-center justify-between p-3 bg-muted/50 rounded-lg"
                      >
                        <div>
                          <p className="font-medium capitalize">{item.type}</p>
                          <p className="text-sm text-muted-foreground">{item.message}</p>
                        </div>
                        <span className="text-xs text-muted-foreground">
                          {new Date(item.timestamp).toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </span>
                      </div>
                    ))
                  )}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Low Stock Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="h-5 w-5" />
                Low Stock Alert
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {low_stock_items.map((item) => (
                  <div
                    key={item.sku_id}
                    className="flex items-center justify-between p-3 bg-orange-50 dark:bg-orange-950/20 rounded-lg border border-orange-200 dark:border-orange-800"
                  >
                    <div>
                      <p className="font-medium">SKU: {item.sku_id}</p>
                      <p className="text-sm text-muted-foreground">Product ID: {item.product_id}</p>
                    </div>
                    <span className="text-sm font-medium text-orange-600 dark:text-orange-400">
                      {item.quantity} left
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </AdminLayout>
  )
}

</admin/page.tsx>

<admin/orders/loading.tsx>
export default function Loading() {
  return null
}

</admin/orders/loading.tsx>

<admin/orders/page.tsx>
"use client"

import { useState } from "react"
import { useQuery } from "@tanstack/react-query"
import { AdminLayout } from "@/components/admin/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import {
  Table, TableBody, TableCell, TableHead, TableHeader, TableRow
} from "@/components/ui/table"
import {
  Tabs, TabsContent, TabsList, TabsTrigger
} from "@/components/ui/tabs"
import {
  DropdownMenu, DropdownMenuContent, DropdownMenuItem,
  DropdownMenuSeparator, DropdownMenuTrigger
} from "@/components/ui/dropdown-menu"
import {
  Search, MoreHorizontal, Eye, Edit, Package, Clock, CheckCircle, RotateCcw
} from "lucide-react"
import { adminApi } from "@/lib/api/admin"
import { useToast } from "@/hooks/use-toast"

export default function AdminOrdersPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedTab, setSelectedTab] = useState("all")
  const { toast } = useToast()

  const {
    data: orders,
    isLoading,
    refetch,
  } = useQuery({
    queryKey: ["admin-orders"],
    queryFn: adminApi.getOrders,
  })

  const filteredOrders = orders?.filter((order) => {
    const matchesSearch =
      order.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
      order.items.some((item) => item.product_name.toLowerCase().includes(searchQuery.toLowerCase()))

    const matchesTab =
      selectedTab === "all" ||
      (selectedTab === "pending" && order.status === "pending") ||
      (selectedTab === "in_progress" && order.status === "in_progress") ||
      (selectedTab === "completed" && order.status === "completed") ||
      (selectedTab === "delivered" && order.status === "delivered") ||
      (selectedTab === "returned" && order.status === "returned")

    return matchesSearch && matchesTab
  }) || []

  const handleUpdateOrderStatus = async (orderId: string, newStatus: string) => {
    try {
      await adminApi.updateOrderStatus(orderId, newStatus)
      toast({
        title: "Order updated",
        description: `Order status has been updated to ${newStatus}.`,
      })
      refetch()
    } catch (error: any) {
      toast({
        title: "Error",
        description: error?.response?.data?.message || "Failed to update order status. Please try again.",
        variant: "destructive",
      })
    }
  }

  const getStatusBadge = (status: string) => {
    type BadgeVariant = "default" | "destructive" | "secondary" | "outline";
    const statusConfig: Record<string, { variant: BadgeVariant, color: string, icon: React.ElementType }> = {
      pending: { variant: "secondary", color: "bg-yellow-100 text-yellow-700", icon: Clock },
      in_progress: { variant: "default", color: "bg-blue-100 text-blue-700", icon: Package },
      completed: { variant: "default", color: "bg-green-100 text-green-700", icon: CheckCircle },
      delivered: { variant: "default", color: "bg-green-100 text-green-700", icon: CheckCircle },
      returned: { variant: "destructive", color: "bg-red-100 text-red-700", icon: RotateCcw },
    }

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending
    const Icon = config.icon

    return (
      <Badge variant={config.variant} className={config.color}>
        <Icon className="h-3 w-3 mr-1" />
        {status.replace("_", " ")}
      </Badge>
    )
  }

  const getUserName = (userId: string) => userId // Replace with lookup if needed

  const getOrderStats = () => {
    if (!orders) return { total: 0, pending: 0, in_progress: 0, completed: 0, delivered: 0, returned: 0 }
    return {
      total: orders.length,
      pending: orders.filter((o) => o.status === "pending").length,
      in_progress: orders.filter((o) => o.status === "in_progress").length,
      completed: orders.filter((o) => o.status === "completed").length,
      delivered: orders.filter((o) => o.status === "delivered").length,
      returned: orders.filter((o) => o.status === "returned").length,
    }
  }

  const stats = getOrderStats()

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Orders Management</h1>
            <p className="text-muted-foreground">Monitor and manage all customer orders ({stats.total} orders)</p>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-6 gap-6">
          {[
            { label: "Total", value: stats.total, icon: Package, color: "text-blue-500" },
            { label: "Pending", value: stats.pending, icon: Clock, color: "text-yellow-500" },
            { label: "In Progress", value: stats.in_progress, icon: Package, color: "text-blue-500" },
            { label: "Completed", value: stats.completed, icon: CheckCircle, color: "text-green-500" },
            { label: "Delivered", value: stats.delivered, icon: CheckCircle, color: "text-green-500" },
            { label: "Returned", value: stats.returned, icon: RotateCcw, color: "text-red-500" },
          ].map((stat, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">{stat.label}</p>
                    <p className={`text-2xl font-bold ${stat.color}`}>{stat.value}</p>
                  </div>
                  <stat.icon className={`h-8 w-8 ${stat.color}`} />
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Orders Table */}
        <Card>
          <CardHeader>
            <CardTitle>All Orders</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-4">
              <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
                <TabsList>
                  {["all", "pending", "in_progress", "completed", "delivered", "returned"].map((status) => (
                    <TabsTrigger key={status} value={status}>
                      {status.replace("_", " ")}
                    </TabsTrigger>
                  ))}
                </TabsList>
                <div className="relative">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search orders..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-8 w-64"
                  />
                </div>
              </div>

              <TabsContent value={selectedTab} className="space-y-4">
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Order ID</TableHead>
                        <TableHead>Customer</TableHead>
                        <TableHead>Items</TableHead>
                        <TableHead>Total Amount</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Payment</TableHead>
                        <TableHead>Date</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredOrders.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={8} className="text-center py-8 text-muted-foreground">
                            No orders found matching your criteria.
                          </TableCell>
                        </TableRow>
                      ) : (
                        filteredOrders.map((order) => (
                          <TableRow key={order.id}>
                            <TableCell className="font-medium">#{order.id}</TableCell>
                            <TableCell>{getUserName(order.user_id)}</TableCell>
                            <TableCell>
                              <div className="space-y-1">
                                {order.items.slice(0, 2).map((item, i) => (
                                  <div key={i} className="text-sm">
                                    {item.product_name} x{item.quantity}
                                  </div>
                                ))}
                                {order.items.length > 2 && (
                                  <div className="text-xs text-muted-foreground">
                                    +{order.items.length - 2} more items
                                  </div>
                                )}
                              </div>
                            </TableCell>
                            <TableCell className="font-semibold">${order.total_amount.toFixed(2)}</TableCell>
                            <TableCell>{getStatusBadge(order.status)}</TableCell>
                            <TableCell>
                              <Badge
                                variant={order.payment_status === "paid" ? "default" : "secondary"}
                                className={
                                  order.payment_status === "paid"
                                    ? "bg-green-100 text-green-700"
                                    : "bg-yellow-100 text-yellow-700"
                                }
                              >
                                {order.payment_status}
                              </Badge>
                            </TableCell>
                            <TableCell>{new Date(order.created_at).toLocaleDateString()}</TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem>
                                    <Eye className="h-4 w-4 mr-2" />
                                    View Details
                                  </DropdownMenuItem>
                                  <DropdownMenuItem>
                                    <Edit className="h-4 w-4 mr-2" />
                                    Edit Order
                                  </DropdownMenuItem>
                                  <DropdownMenuSeparator />
                                  {order.status === "pending" && (
                                    <DropdownMenuItem onClick={() => handleUpdateOrderStatus(order.id, "in_progress")}>
                                      Mark as In Progress
                                    </DropdownMenuItem>
                                  )}
                                  {order.status === "in_progress" && (
                                    <DropdownMenuItem onClick={() => handleUpdateOrderStatus(order.id, "completed")}>
                                      Mark as Completed
                                    </DropdownMenuItem>
                                  )}
                                  {order.status === "completed" && (
                                    <DropdownMenuItem onClick={() => handleUpdateOrderStatus(order.id, "delivered")}>
                                      Mark as Delivered
                                    </DropdownMenuItem>
                                  )}
                                  {(order.status === "delivered" || order.status === "completed") && (
                                    <DropdownMenuItem onClick={() => handleUpdateOrderStatus(order.id, "returned")}>
                                      Mark as Returned
                                    </DropdownMenuItem>
                                  )}
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </AdminLayout>
  )
}

</admin/orders/page.tsx>

<admin/profile/page.tsx>
"use client"

import type React from "react"

import { useState } from "react"
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query"
import { AdminLayout } from "@/components/admin/admin-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { Eye, EyeOff, Camera, Save, User, Lock } from "lucide-react"
import { adminApi } from "@/lib/api/admin"
import { useToast } from "@/hooks/use-toast"

export default function AdminProfilePage() {
  const [showCurrentPassword, setShowCurrentPassword] = useState(false)
  const [showNewPassword, setShowNewPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const { toast } = useToast()
  const queryClient = useQueryClient()

  // Profile form state
  const [profileForm, setProfileForm] = useState({
    name: "",
    email: "",
    phone: "",
  })

  // Password form state
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  })

  const { data: adminProfile, isLoading } = useQuery({
    queryKey: ["admin-profile"],
    queryFn: adminApi.getAdminProfile,
    onSuccess: (data) => {
      setProfileForm({
        name: data.name,
        email: data.email,
        phone: data.phone || "",
      })
    },
  })

  const updateProfileMutation = useMutation({
    mutationFn: adminApi.updateAdminProfile,
    onSuccess: () => {
      toast({
        title: "Profile updated",
        description: "Your profile has been successfully updated.",
      })
      queryClient.invalidateQueries({ queryKey: ["admin-profile"] })
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update profile. Please try again.",
        variant: "destructive",
      })
    },
  })

  const changePasswordMutation = useMutation({
    mutationFn: ({ currentPassword, newPassword }: { currentPassword: string; newPassword: string }) =>
      adminApi.changePassword(currentPassword, newPassword),
    onSuccess: () => {
      toast({
        title: "Password changed",
        description: "Your password has been successfully changed.",
      })
      setPasswordForm({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      })
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to change password. Please try again.",
        variant: "destructive",
      })
    },
  })

  const handleProfileSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    updateProfileMutation.mutate(profileForm)
  }

  const handlePasswordSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast({
        title: "Error",
        description: "New passwords do not match.",
        variant: "destructive",
      })
      return
    }

    if (passwordForm.newPassword.length < 8) {
      toast({
        title: "Error",
        description: "Password must be at least 8 characters long.",
        variant: "destructive",
      })
      return
    }

    changePasswordMutation.mutate({
      currentPassword: passwordForm.currentPassword,
      newPassword: passwordForm.newPassword,
    })
  }

  if (isLoading) {
    return (
      <AdminLayout>
        <div className="space-y-6">
          <h1 className="text-3xl font-bold">Admin Profile</h1>
          <Card>
            <CardContent className="p-6">
              <div className="animate-pulse space-y-4">
                <div className="h-20 w-20 bg-muted rounded-full"></div>
                <div className="space-y-2">
                  <div className="h-4 bg-muted rounded w-1/4"></div>
                  <div className="h-4 bg-muted rounded w-1/2"></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </AdminLayout>
    )
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold">Admin Profile</h1>
          <p className="text-muted-foreground">Manage your account settings and preferences</p>
        </div>

        {/* Profile Overview Card */}
        <Card>
          <CardHeader>
            <CardTitle>Profile Overview</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Avatar className="h-20 w-20">
                  <AvatarImage src={adminProfile?.avatar_url || "/placeholder.svg"} alt={adminProfile?.name} />
                  <AvatarFallback className="text-lg">
                    {adminProfile?.name
                      ?.split(" ")
                      .map((n) => n[0])
                      .join("")
                      .toUpperCase()}
                  </AvatarFallback>
                </Avatar>
                <Button
                  size="icon"
                  variant="outline"
                  className="absolute -bottom-2 -right-2 h-8 w-8 rounded-full bg-transparent"
                >
                  <Camera className="h-4 w-4" />
                </Button>
              </div>
              <div className="space-y-1">
                <h3 className="text-xl font-semibold">{adminProfile?.name}</h3>
                <p className="text-muted-foreground">{adminProfile?.email}</p>
                <div className="flex items-center gap-2">
                  <Badge variant="default" className="bg-purple-100 text-purple-700">
                    <User className="h-3 w-3 mr-1" />
                    {adminProfile?.role}
                  </Badge>
                  <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                    Active
                  </Badge>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Profile Management Tabs */}
        <Tabs defaultValue="profile" className="space-y-4">
          <TabsList>
            <TabsTrigger value="profile">Profile Information</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
          </TabsList>

          <TabsContent value="profile">
            <Card>
              <CardHeader>
                <CardTitle>Profile Information</CardTitle>
                <CardDescription>Update your personal information and contact details.</CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleProfileSubmit} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name</Label>
                      <Input
                        id="name"
                        value={profileForm.name}
                        onChange={(e) => setProfileForm({ ...profileForm, name: e.target.value })}
                        placeholder="Enter your full name"
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        type="email"
                        value={profileForm.email}
                        onChange={(e) => setProfileForm({ ...profileForm, email: e.target.value })}
                        placeholder="Enter your email"
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number</Label>
                      <Input
                        id="phone"
                        value={profileForm.phone}
                        onChange={(e) => setProfileForm({ ...profileForm, phone: e.target.value })}
                        placeholder="Enter your phone number"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Role</Label>
                      <Input value={adminProfile?.role || "Admin"} disabled />
                    </div>
                  </div>

                  <Separator />

                  <div className="flex justify-end">
                    <Button
                      type="submit"
                      disabled={updateProfileMutation.isPending}
                      className="flex items-center gap-2"
                    >
                      <Save className="h-4 w-4" />
                      {updateProfileMutation.isPending ? "Saving..." : "Save Changes"}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="security">
            <Card>
              <CardHeader>
                <CardTitle>Change Password</CardTitle>
                <CardDescription>Update your password to keep your account secure.</CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handlePasswordSubmit} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="currentPassword">Current Password</Label>
                    <div className="relative">
                      <Input
                        id="currentPassword"
                        type={showCurrentPassword ? "text" : "password"}
                        value={passwordForm.currentPassword}
                        onChange={(e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value })}
                        placeholder="Enter your current password"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                      >
                        {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="newPassword">New Password</Label>
                    <div className="relative">
                      <Input
                        id="newPassword"
                        type={showNewPassword ? "text" : "password"}
                        value={passwordForm.newPassword}
                        onChange={(e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value })}
                        placeholder="Enter your new password"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowNewPassword(!showNewPassword)}
                      >
                        {showNewPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword">Confirm New Password</Label>
                    <div className="relative">
                      <Input
                        id="confirmPassword"
                        type={showConfirmPassword ? "text" : "password"}
                        value={passwordForm.confirmPassword}
                        onChange={(e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value })}
                        placeholder="Confirm your new password"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      >
                        {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <div className="bg-muted p-4 rounded-lg">
                    <h4 className="font-medium mb-2">Password Requirements:</h4>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      <li>â€¢ At least 8 characters long</li>
                      <li>â€¢ Include uppercase and lowercase letters</li>
                      <li>â€¢ Include at least one number</li>
                      <li>â€¢ Include at least one special character</li>
                    </ul>
                  </div>

                  <Separator />

                  <div className="flex justify-end">
                    <Button
                      type="submit"
                      disabled={changePasswordMutation.isPending}
                      className="flex items-center gap-2"
                    >
                      <Lock className="h-4 w-4" />
                      {changePasswordMutation.isPending ? "Changing..." : "Change Password"}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </AdminLayout>
  )
}

</admin/profile/page.tsx>

<admin/users/loading.tsx>
export default function Loading() {
  return null
}

</admin/users/loading.tsx>

<admin/users/page.tsx>
"use client"

import { useState } from "react"
import { useQuery } from "@tanstack/react-query"
import { AdminLayout } from "@/components/admin/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Search, MoreHorizontal, Eye, Edit, Trash2, Filter } from "lucide-react"
import { adminApi } from "@/lib/api/admin"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useToast } from "@/hooks/use-toast"

export default function AdminUsersPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [filterRole, setFilterRole] = useState<"all" | "user" | "admin">("all")
  const { toast } = useToast()

  const {
    data: users,
    isLoading,
    refetch,
  } = useQuery({
    queryKey: ["admin-users"],
    queryFn: adminApi.getUsers,
  })

  const {
    data: dashboardData,
  } = useQuery({
    queryKey: ["admin-dashboard"],
    queryFn: adminApi.getDashboard,
  })

  const totalUsers = dashboardData?.total_users ?? 0
  const totalAdminUsers = users?.filter((u) => u.role === "admin").length ?? 1

  const filteredUsers =
    users?.filter((user) => {
      const matchesSearch =
        user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.email.toLowerCase().includes(searchQuery.toLowerCase())
      const matchesRole = filterRole === "all" || user.role === filterRole
      return matchesSearch && matchesRole
    }) || []

  const handleDeleteUser = async (userId: string, userName: string) => {
    if (window.confirm(`Are you sure you want to delete user "${userName}"?`)) {
      try {
        await adminApi.deleteUser(userId)
        toast({
          title: "User deleted",
          description: `${userName} has been successfully deleted.`,
        })
        refetch()
      } catch (error) {
        toast({
          title: "Error",
          description: "Failed to delete user. Please try again.",
          variant: "destructive",
        })
      }
    }
  }

  const handleToggleUserStatus = async (userId: string, userName: string, currentStatus: string) => {
    const newStatus = currentStatus === "active" ? "suspended" : "active"
    try {
      await adminApi.updateUserStatus(userId, newStatus)
      toast({
        title: "User status updated",
        description: `${userName} has been ${newStatus}.`,
      })
      refetch()
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update user status. Please try again.",
        variant: "destructive",
      })
    }
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Users Management</h1>
            <p className="text-muted-foreground">
              Manage and monitor all registered users ({filteredUsers.length} shown)
            </p>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total Users</p>
                  <p className="text-2xl font-bold">{totalUsers}</p>
                </div>
                <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 text-sm font-bold">ðŸ‘¥</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Active Users</p>
                  <p className="text-2xl font-bold text-green-600">
                    {users?.filter((u) => u.role === "user").length || 0}
                  </p>
                </div>
                <div className="h-8 w-8 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-green-600 text-sm font-bold">âœ“</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Admin Users</p>
                  <p className="text-2xl font-bold text-purple-600">{totalAdminUsers}</p>
                </div>
                <div className="h-8 w-8 bg-purple-100 rounded-full flex items-center justify-center">
                  <span className="text-purple-600 text-sm font-bold">âš¡</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters and Search */}
        <Card>
          <CardHeader>
            <CardTitle>All Users</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search users by name or email..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8"
                />
              </div>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" className="bg-transparent">
                    <Filter className="h-4 w-4 mr-2" />
                    Filter by Role
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem onClick={() => setFilterRole("all")}>All Users</DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setFilterRole("user")}>Regular Users</DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setFilterRole("admin")}>Admin Users</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>

            {/* Users Table */}
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>User</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Phone</TableHead>
                    <TableHead>Join Date</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredUsers.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center py-8 text-muted-foreground">
                        No users found matching your criteria.
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredUsers.map((user) => (
                      <TableRow key={user.id}>
                        <TableCell>
                          <div className="flex items-center space-x-3">
                            <Avatar className="h-8 w-8">
                              <AvatarImage src={user.avatar_url || "/placeholder.svg"} alt={user.name} />
                              <AvatarFallback>
                                {user.name
                                  .split(" ")
                                  .map((n) => n[0])
                                  .join("")
                                  .toUpperCase()}
                              </AvatarFallback>
                            </Avatar>
                            <div>
                              <p className="font-medium">{user.name}</p>
                              <p className="text-sm text-muted-foreground">ID: {user.id}</p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>{user.email}</TableCell>
                        <TableCell>
                          <Badge
                            variant={user.role === "admin" ? "default" : "secondary"}
                            className={user.role === "admin" ? "bg-purple-100 text-purple-700" : ""}
                          >
                            {user.role}
                          </Badge>
                        </TableCell>
                        <TableCell>{user.phone || "Not provided"}</TableCell>
                        <TableCell>{user.dob ? new Date(user.dob).toLocaleDateString() : "Not provided"}</TableCell>
                        <TableCell>
                          <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                            Active
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem>
                                <Eye className="h-4 w-4 mr-2" />
                                View Details
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Edit className="h-4 w-4 mr-2" />
                                Edit User
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem onClick={() => handleToggleUserStatus(user.id, user.name, "active")}>
                                Suspend User
                              </DropdownMenuItem>
                              <DropdownMenuItem
                                className="text-red-600"
                                onClick={() => handleDeleteUser(user.id, user.name)}
                              >
                                <Trash2 className="h-4 w-4 mr-2" />
                                Delete User
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>
    </AdminLayout>
  )
}

</admin/users/page.tsx>

<admin/products/loading.tsx>
export default function Loading() {
  return null
}

</admin/products/loading.tsx>

<admin/products/page.tsx>
"use client"

import { useState } from "react"
import { useQuery } from "@tanstack/react-query"
import { AdminLayout } from "@/components/admin/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Search,
  MoreHorizontal,
  Eye,
  Edit,
  Trash2,
  Plus,
  Package,
  DollarSign,
  TrendingUp,
  AlertTriangle,
} from "lucide-react"
import { adminApi } from "@/lib/api/admin"
import { productsApi } from "@/lib/api/products"
import { useToast } from "@/hooks/use-toast"
import Image from "next/image"

export default function AdminProductsPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [editingProduct, setEditingProduct] = useState<any>(null)
  const { toast } = useToast()

  // Form state for add/edit product
  const [productForm, setProductForm] = useState({
    name: "",
    description: "",
    price: "",
    brand: "",
    categoryId: "",
    imageUrls: [""],
    sizes: [""],
    colors: [""],
  })

  const {
    data: products,
    isLoading: productsLoading,
    refetch: refetchProducts,
  } = useQuery({
    queryKey: ["admin-products"],
    queryFn: () => productsApi.getProducts(),
  })

  const { data: categories } = useQuery({
  queryKey: ["categories"],
  queryFn: productsApi.getCategories,
  staleTime: 0,           // Always consider stale (force refetch)
  refetchOnMount: true,   // Refetch on every mount
  refetchOnWindowFocus: true, // Optional: useful during debugging
})


  // Filter products based on search and category
  const filteredProducts =
    products?.filter((product) => {
      const matchesSearch =
        product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        product.brand.toLowerCase().includes(searchQuery.toLowerCase()) ||
        product.description.toLowerCase().includes(searchQuery.toLowerCase())

      const matchesCategory = selectedCategory === "all" || product.categoryId === selectedCategory

      return matchesSearch && matchesCategory
    }) || []

  const handleAddProduct = async () => {
    try {
      await adminApi.createProduct({
        name: productForm.name,
        description: productForm.description,
        price: Number.parseFloat(productForm.price),
        brand: productForm.brand,
        categoryId: productForm.categoryId,
        imageUrls: productForm.imageUrls.filter((url) => url.trim() !== ""),
        sizes: productForm.sizes.filter((size) => size.trim() !== ""),
        colors: productForm.colors.filter((color) => color.trim() !== ""),
      })

      toast({
        title: "Product added",
        description: "The product has been successfully added.",
      })

      setIsAddDialogOpen(false)
      resetForm()
      refetchProducts()
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to add product. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleEditProduct = async () => {
    try {
      await adminApi.updateProduct(editingProduct.id, {
        name: productForm.name,
        description: productForm.description,
        price: Number.parseFloat(productForm.price),
        brand: productForm.brand,
        categoryId: productForm.categoryId,
        imageUrls: productForm.imageUrls.filter((url) => url.trim() !== ""),
        sizes: productForm.sizes.filter((size) => size.trim() !== ""),
        colors: productForm.colors.filter((color) => color.trim() !== ""),
      })

      toast({
        title: "Product updated",
        description: "The product has been successfully updated.",
      })

      setIsEditDialogOpen(false)
      setEditingProduct(null)
      resetForm()
      refetchProducts()
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update product. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleDeleteProduct = async (productId: string, productName: string) => {
    if (window.confirm(`Are you sure you want to delete "${productName}"?`)) {
      try {
        await adminApi.deleteProduct(productId)
        toast({
          title: "Product deleted",
          description: `${productName} has been successfully deleted.`,
        })
        refetchProducts()
      } catch (error) {
        toast({
          title: "Error",
          description: "Failed to delete product. Please try again.",
          variant: "destructive",
        })
      }
    }
  }

  const openEditDialog = (product: any) => {
    setEditingProduct(product)
    setProductForm({
      name: product.name,
      description: product.description,
      price: product.price.toString(),
      brand: product.brand,
      categoryId: product.categoryId,
      imageUrls: product.imageUrls.length > 0 ? product.imageUrls : [""],
      sizes: product.sizes?.length > 0 ? product.sizes : [""],
      colors: product.colors?.length > 0 ? product.colors : [""],
    })
    setIsEditDialogOpen(true)
  }

  const resetForm = () => {
    setProductForm({
      name: "",
      description: "",
      price: "",
      brand: "",
      categoryId: "",
      imageUrls: [""],
      sizes: [""],
      colors: [""],
    })
  }

  const addArrayField = (field: "imageUrls" | "sizes" | "colors") => {
    setProductForm((prev) => ({
      ...prev,
      [field]: [...prev[field], ""],
    }))
  }

  const updateArrayField = (field: "imageUrls" | "sizes" | "colors", index: number, value: string) => {
    setProductForm((prev) => ({
      ...prev,
      [field]: prev[field].map((item, i) => (i === index ? value : item)),
    }))
  }

  const removeArrayField = (field: "imageUrls" | "sizes" | "colors", index: number) => {
    setProductForm((prev) => ({
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index),
    }))
  }

  const getProductStats = () => {
    if (!products) return { total: 0, lowStock: 0, totalValue: 0, categories: 0 }

    return {
      total: products.length,
      lowStock: Math.floor(products.length * 0.1), // Simulate 10% low stock
      totalValue: products.reduce((sum, p) => sum + p.price, 0),
      categories: categories?.length || 0,
    }
  }

    const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    const reader = new FileReader()
    reader.onloadend = async () => {
      const base64 = reader.result?.toString().split(",")[1]
      if (!base64) return

      try {
        const res = await adminApi.uploadImage({
          imageData: base64,
          fileType: file.type,
          entityType: "product",
          entityId: "temp", // or real ID if available
        })

        setProductForm((prev) => ({
          ...prev,
          imageUrls: [...prev.imageUrls, res.imageId],
        }))
      } catch {
        toast({
          title: "Upload failed",
          description: "Unable to upload image.",
          variant: "destructive",
        })
      }
    }

    reader.readAsDataURL(file)
  }

  const stats = getProductStats()

  if (productsLoading) {
    return (
      <AdminLayout>
        <div className="space-y-6">
          <h1 className="text-3xl font-bold">Products Management</h1>
          <Card>
            <CardContent className="p-6">
              <div className="animate-pulse space-y-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <div key={i} className="h-16 bg-muted rounded"></div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </AdminLayout>
    )
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Products Management</h1>
            <p className="text-muted-foreground">Manage your product catalog and inventory ({stats.total} products)</p>
          </div>
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-primary hover:bg-primary/90">
                <Plus className="h-4 w-4 mr-2" />
                Add Product
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Add New Product</DialogTitle>
              <DialogDescription>Create a new product in your catalog.</DialogDescription>
            </DialogHeader>

            <div className="grid gap-4 py-4">
              {/* Product Name & Brand */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Product Name *</Label>
                  <Input
                    id="name"
                    required
                    value={productForm.name}
                    onChange={(e) => setProductForm((prev) => ({ ...prev, name: e.target.value }))}
                    placeholder="Enter product name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="brand">Brand</Label>
                  <Input
                    id="brand"
                    value={productForm.brand}
                    onChange={(e) => setProductForm((prev) => ({ ...prev, brand: e.target.value }))}
                    placeholder="Enter brand name"
                  />
                </div>
              </div>

              {/* Price & Category */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="price">Price ($)</Label>
                  <Input
                    id="price"
                    type="number"
                    step="0.01"
                    value={productForm.price}
                    onChange={(e) => setProductForm((prev) => ({ ...prev, price: e.target.value }))}
                    placeholder="0.00"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category">Category *</Label>
                  <Select
                    value={productForm.categoryId}
                    onValueChange={(value) => setProductForm((prev) => ({ ...prev, categoryId: value }))}
                    required
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories
                        ?.filter((cat) => cat.parent_id)
                        .map((category) => {
                          const parent = categories.find((p) => p.id === category.parent_id)
                          const label = `${parent?.name || ""} / ${category.name}`
                          return (
                            <SelectItem key={category.id} value={category.id}>
                              {label} ({category.gender})
                            </SelectItem>
                          )
                        })}
                    </SelectContent>
                  </Select>
                </div>

              </div>

              {/* Description */}
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={productForm.description}
                  onChange={(e) => setProductForm((prev) => ({ ...prev, description: e.target.value }))}
                  placeholder="Enter product description"
                  rows={3}
                />
              </div>

              {/* Upload Image */}
              <div className="space-y-2">
                <Label>Product Image</Label>
                <Input type="file" accept="image/jpeg" onChange={handleFileUpload} />
                {productForm.imageUrls.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {productForm.imageUrls
                      .filter((url) => url.trim() !== "")
                      .map((id, index) => (
                        <div
                          key={index}
                          className="relative h-16 w-16 border rounded overflow-hidden bg-muted"
                        >
                          <Image
                            src={`/api/images/${id}`}
                            alt="Product Image"
                            fill
                            className="object-cover"
                          />
                        </div>
                      ))}
                  </div>
                )}
              </div>

              {/* Sizes */}
              <div className="space-y-2">
                <Label>Available Sizes</Label>
                {productForm.sizes.map((size, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={size}
                      onChange={(e) => updateArrayField("sizes", index, e.target.value)}
                      placeholder="e.g., S, M, L"
                    />
                    {productForm.sizes.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        onClick={() => removeArrayField("sizes", index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
                <Button type="button" variant="outline" onClick={() => addArrayField("sizes")}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Size
                </Button>
              </div>

              {/* Colors */}
              <div className="space-y-2">
                <Label>Available Colors</Label>
                {productForm.colors.map((color, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={color}
                      onChange={(e) => updateArrayField("colors", index, e.target.value)}
                      placeholder="Enter color"
                    />
                    {productForm.colors.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        onClick={() => removeArrayField("colors", index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
                <Button type="button" variant="outline" onClick={() => addArrayField("colors")}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Color
                </Button>
              </div>
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleAddProduct}>Add Product</Button>
            </DialogFooter>
          </DialogContent>

          </Dialog>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total Products</p>
                  <p className="text-2xl font-bold">{stats.total}</p>
                </div>
                <Package className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Categories</p>
                  <p className="text-2xl font-bold">{stats.categories}</p>
                </div>
                <TrendingUp className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total Value</p>
                  <p className="text-2xl font-bold">${stats.totalValue.toFixed(2)}</p>
                </div>
                <DollarSign className="h-8 w-8 text-purple-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Low Stock</p>
                  <p className="text-2xl font-bold text-orange-600">{stats.lowStock}</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-orange-500" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Products Table */}
        <Card>
          <CardHeader>
            <CardTitle>Product Catalog</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8"
                />
              </div>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="w-48 bg-transparent">
                  <SelectValue placeholder="Filter by category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  {categories?.map((category) => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.name} ({category.gender})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Product</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead>Brand</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Stock</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredProducts.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center py-8 text-muted-foreground">
                        No products found matching your criteria.
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredProducts.map((product) => (
                      <TableRow key={product.id}>
                        <TableCell>
                          <div className="flex items-center space-x-3">
                            <div className="relative h-12 w-12 flex-shrink-0">
                              <Image
                                src={product.imageUrls[0] || "/placeholder.svg?height=48&width=48"}
                                alt={product.name}
                                fill
                                className="object-cover rounded-md"
                              />
                            </div>
                            <div>
                              <p className="font-medium">{product.name}</p>
                              <p className="text-sm text-muted-foreground">ID: {product.id}</p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          {categories?.find((cat) => cat.id === product.categoryId)?.name || "Unknown"}
                        </TableCell>
                        <TableCell>{product.brand}</TableCell>
                        <TableCell className="font-semibold">${product.price.toFixed(2)}</TableCell>
                        <TableCell>
                          <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                            In Stock
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                            Active
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem>
                                <Eye className="h-4 w-4 mr-2" />
                                View Details
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => openEditDialog(product)}>
                                <Edit className="h-4 w-4 mr-2" />
                                Edit Product
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem
                                className="text-red-600"
                                onClick={() => handleDeleteProduct(product.id, product.name)}
                              >
                                <Trash2 className="h-4 w-4 mr-2" />
                                Delete Product
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        {/* Edit Product Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Edit Product</DialogTitle>
              <DialogDescription>Update the product information.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-name">Product Name</Label>
                  <Input
                    id="edit-name"
                    value={productForm.name}
                    onChange={(e) => setProductForm((prev) => ({ ...prev, name: e.target.value }))}
                    placeholder="Enter product name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-brand">Brand</Label>
                  <Input
                    id="edit-brand"
                    value={productForm.brand}
                    onChange={(e) => setProductForm((prev) => ({ ...prev, brand: e.target.value }))}
                    placeholder="Enter brand name"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-price">Price ($)</Label>
                  <Input
                    id="edit-price"
                    type="number"
                    step="0.01"
                    value={productForm.price}
                    onChange={(e) => setProductForm((prev) => ({ ...prev, price: e.target.value }))}
                    placeholder="0.00"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-category">Category</Label>
                  <Select
                    value={productForm.categoryId}
                    onValueChange={(value) => setProductForm((prev) => ({ ...prev, categoryId: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories?.map((category) => (
                        <SelectItem key={category.id} value={category.id}>
                          {category.name} ({category.gender})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="edit-description">Description</Label>
                <Textarea
                  id="edit-description"
                  value={productForm.description}
                  onChange={(e) => setProductForm((prev) => ({ ...prev, description: e.target.value }))}
                  placeholder="Enter product description"
                  rows={3}
                />
              </div>

              {/* Image URLs */}
              <div className="space-y-2">
                <Label>Image URLs</Label>
                {productForm.imageUrls.map((url, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={url}
                      onChange={(e) => updateArrayField("imageUrls", index, e.target.value)}
                      placeholder="Enter image URL"
                    />
                    {productForm.imageUrls.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        onClick={() => removeArrayField("imageUrls", index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
                <Button type="button" variant="outline" onClick={() => addArrayField("imageUrls")}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Image URL
                </Button>
              </div>

              {/* Sizes */}
              <div className="space-y-2">
                <Label>Available Sizes</Label>
                {productForm.sizes.map((size, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={size}
                      onChange={(e) => updateArrayField("sizes", index, e.target.value)}
                      placeholder="Enter size (e.g., S, M, L)"
                    />
                    {productForm.sizes.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        onClick={() => removeArrayField("sizes", index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
                <Button type="button" variant="outline" onClick={() => addArrayField("sizes")}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Size
                </Button>
              </div>

              {/* Colors */}
              <div className="space-y-2">
                <Label>Available Colors</Label>
                {productForm.colors.map((color, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={color}
                      onChange={(e) => updateArrayField("colors", index, e.target.value)}
                      placeholder="Enter color"
                    />
                    {productForm.colors.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        onClick={() => removeArrayField("colors", index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
                <Button type="button" variant="outline" onClick={() => addArrayField("colors")}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Color
                </Button>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleEditProduct}>Update Product</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </AdminLayout>
  )
}

</admin/products/page.tsx>

<layout.tsx>
import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { Providers } from "@/components/providers"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "StyleNest - Premium Fashion E-commerce",
  description: "Discover the latest fashion trends with StyleNest",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  )
}

</layout.tsx>

<dashboard/page.tsx>
"use client"

import { useAuth } from "@/contexts/auth-context"
import { useRouter } from "next/navigation"
import { useEffect } from "react"
import { UserDashboard } from "@/components/dashboard/user-dashboard"
import { Header } from "@/components/layout/header"

export default function DashboardPage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/auth/login")
    }
  }, [user, isLoading, router])

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Header />
      <UserDashboard />
    </div>
  )
}

</dashboard/page.tsx>

<products/page.tsx>
"use client"

import { useState } from "react"
import { useQuery } from "@tanstack/react-query"
import { Header } from "@/components/layout/header"
import { Footer } from "@/components/layout/footer"
import { ProductCard } from "@/components/products/product-card"
import { ProductCardSkeleton } from "@/components/products/product-card-skeleton"
import { ProductFilters } from "@/components/products/product-filters"
import { productsApi } from "@/lib/api/products"
import { Button } from "@/components/ui/button"
import { Filter } from "lucide-react"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"

export default function ProductsPage() {
  const [filters, setFilters] = useState({
    categoryId: "",
    brand: "",
    priceRange: "",
    sortBy: "",
    search: "",
  })

  const {
    data: products,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["products", filters],
    queryFn: () => productsApi.getProducts(filters),
  })

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1">
        <div className="container py-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold">All Products</h1>
              <p className="text-muted-foreground mt-2">
                {products ? `${products.length} products found` : "Loading products..."}
              </p>
            </div>

            {/* Mobile Filter Button */}
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" className="lg:hidden bg-transparent">
                  <Filter className="h-4 w-4 mr-2" />
                  Filters
                </Button>
              </SheetTrigger>
              <SheetContent side="left">
                <ProductFilters filters={filters} onFiltersChange={setFilters} />
              </SheetContent>
            </Sheet>
          </div>

          <div className="flex gap-8">
            {/* Desktop Filters */}
            <div className="hidden lg:block w-64 flex-shrink-0">
              <ProductFilters filters={filters} onFiltersChange={setFilters} />
            </div>

            {/* Products Grid */}
            <div className="flex-1">
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {isLoading
                  ? Array.from({ length: 12 }).map((_, i) => <ProductCardSkeleton key={i} />)
                  : products && Array.isArray(products)
                    ? products.map((product) => <ProductCard key={product.id} product={product} />)
                    : null}
              </div>

              {products && Array.isArray(products) && products.length === 0 && (
                <div className="text-center py-12">
                  <p className="text-muted-foreground">No products found matching your criteria.</p>
                </div>
              )}

              {error && (
                <div className="text-center py-12">
                  <p className="text-red-500">Error loading products. Please try again.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  )
}

</products/page.tsx>

